#!/bin/bash
#CASE="global"
#CASE="global"
#CASE="Bessaker"
#CASE="SN71990"
CASE="Frankfurt"
#CASE="SN76914" # Rikshospitalet in Oslo
#CASE="Elverum" # Sykehuset innlandet Elverum 
#CASE="SN18700" # OSLO - BLINDERN
#CASE="ATBcase1" # OSLO - BLINDERN
#CASE="nested"
#CASE="YR"
#CASE="debug"
if [ -z "$DISPLAY" ]
then
	echo "Error: set the DISPLAY variable" #The display variable should be set for post processing purposes in paraview. This issue arises when using screen, and can be resolved by first getting the display variable outside the screen session (echo $DISPLAY) and then inside the screen session setting the variable to this value (i.e. export DISPLAY=localhost:10.0)"
fi
source $HOME/kode/bashScripts/sourceWRF
pathToWPS="$WRFDIRECTORY/Build_WRF/WPS"
pathToWRF="$WRFDIRECTORY/Build_WRF/WRF/run"
loopForecast=true
clearNCEPdata=false
assumeNCEPdataExist=false
runPreproc=false
#extractOptions="--extract_yr --folder=$HOME/results/forecastData/"
extractOptions="--folder=$HOME/results/forecastData/"
if [[ $CASE == "debug" ]]
then
    RUN_DAYS=0
    RUN_HOURS=3
else
    RUN_DAYS=1
    RUN_HOURS=0
fi
RUN_MINUTES=0
RUN_SECONDS=0
START_HOUR=12
START_SIM_DATE="2020-12-05 12:00:00"
START_SIM_DATE="2021-03-01 12:00:00"
#START_SIM_DATE="2021-01-12 12:00:00"
#START_SIM_DATE="2020-12-06 12:00:00"
#START_SIM_DATE="2020-12-14 12:00:00"
START_SIM_DATE="2020-10-01 12:00:00"
#START_SIM_DATE="$(date -u +'%Y-%m-%d') $START_HOUR:00:00" # Get date in UTC

while true
do
    echo "Running WRF program for date "$START_SIM_DATE
	if [[ "$loopForecast" = true ]]
	then
		current_epoch=$(date -u +%s)
		TODAY="$(date -u +'%Y-%m-%d')" # Get date in UTC
		target_epoch=$(date -u +'%s' --date="$START_SIM_DATE UTC")
		sleep_seconds=$(( $target_epoch - $current_epoch ))
		date1=$((`date -u +%s` + $sleep_seconds))
		while [ "$date1" -ge `date -u +%s` ]
		do
			echo -ne "Time until extraction of MetCoOp data: $(date -u --date @$(($date1 - `date +%s` )) +%H:%M:%S)\r";
		done
		python3 extractData.py $extractOptions

		current_epoch=$(date -u +%s)
		TODAY="$(date -u +'%Y-%m-%d')" # Get date in UTC
		target_epoch=$(date -u +'%s' --date="$START_SIM_DATE UTC + 6 hour")
		sleep_seconds=$(( $target_epoch - $current_epoch ))
		date1=$((`date -u +%s` + $sleep_seconds))
		while [ "$date1" -ge `date -u +%s` ]
		do
			echo -ne "Time until start of program: $(date -u --date @$(($date1 - `date +%s` )) +%H:%M:%S)\r";
		done
	fi
	source ./parameters

	##############################################################################################
	## Get geog data
	if [[ ! -d "$GEOG_DATA_PATH" ]]
	then
		mkdir -p $GEOG_DATA_PATH
		echo "Downloading geog data folder $GEOG_DATA_PATH"
		pushd $WPSDATADIRECTORY > /dev/null
		wget https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_low_res_mandatory.tar.gz
		gunzip geog_low_res_mandatory.tar.gz
		tar -xf geog_low_res_mandatory.tar
		wget https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_high_res_mandatory.tar.gz
		gunzip geog_high_res_mandatory.tar.gz
		tar -xf geog_high_res_mandatory.tar
		mv -n WPS_GEOG_LOW_RES/* WPS_GEOG
		rm -rf WPS_GEOG_LOW_RES
		popd > /dev/null
	fi

	if [[ "$runPreproc" = true ]]
    then
        ##############################################################################################
        ## Get NCEP data
        if [[ "$assumeNCEPdataExist" == true ]]
        then
            mkdir -p $WRFDIRECTORY/Build_WRF/DATA
            if [[ "$clearNCEPdata" = true ]]
            then
                rm -f $WRFDIRECTORY/Build_WRF/DATA/*
            fi

            pushd $WRFDIRECTORY/Build_WRF/DATA > /dev/null
            if [[ $NCEPstorageDate -ge $(date -d ${START_DATE:0:10} +%s) ]]
            then
                $HOME/kode/bashScripts/getHistoricNCEPdata $START_DATE $END_DATE $INTERVAL_SECONDS $GFS_RES 
            else
                $HOME/kode/bashScripts/getNCEPdata $START_DATE $END_DATE $INTERVAL_SECONDS $GFS_RES 
            fi
            popd > /dev/null
        fi
        
        ##############################################################################################
        ## WPS
        pathToResults="$HOME/results/WRF/$CASE/$COMP_START_DATE"
        mkdir -p $pathToResults
        cp -f namelist.wps plotgrids_new.ncl plotgrids_global.ncl wrf_wps_ter.ncl $pathToWPS

        pushd $pathToWPS > /dev/null
        if [[ "$RUNGLOBAL" = true ]]
        then
            sed -i '/SED_DX/d;/SED_DY/d;/SED_REF_LAT/d;/SED_REF_LON/d' namelist.wps
        fi
        if [[ "$MAP_PROJ" == "lat-lon" ]]
        then
            sed -i '/truelat1/d;/truelat2/d' namelist.wps
        else
            sed -i '/SED_POLE_LAT/d;/SED_POLE_LON/d' namelist.wps
        fi
        
        DICTS="namelist.wps plotgrids_new.ncl plotgrids_global.ncl wrf_wps_ter.ncl"
        source $HOME/kode/bashScripts/sedFiles
        rm *.png
        if [[ "$RUNGLOBAL" = true ]]
        then
            ncl plotgrids_global.ncl # Plot domains
        else
            ncl plotgrids_new.ncl # Plot domains
        fi
        popd > /dev/null
    fi
    pushd $pathToWPS > /dev/null
	if [[ $1 == 1 ]] 
	then
		rm -f PFILE* FILE* met_em* geo_em* *.log.* GRIBFILE*
		mpirun -np $NP $pathToWPS/geogrid.exe | tee log.geogrid
		#$pathToWPS/geogrid.exe | tee log.geogrid
		for i_domain in $(seq -f "%02g" 1 ${MAX_DOM})
		do
			ncl a="addfile(\"./geo_em.d${i_domain}.nc\",\"r\")" wrf_wps_ter.ncl
			mv plt_geo_6.png "plt_geo_d${i_domain}.png"
		done
		$pathToWPS/link_grib.csh $WRFDIRECTORY/Build_WRF/DATA/GFS_${GFS_RES}_${COMP_START_DATE}
		ln -sf ungrib/Variable_Tables/Vtable.GFS Vtable
		mpirun -np $NP $pathToWPS/ungrib.exe | tee log.ungrib
		#$pathToWPS/ungrib.exe | tee log.ungrib
		mpirun -np $NP $pathToWPS/metgrid.exe | tee log.metgrid
		#$pathToWPS/metgrid.exe | tee log.metgrid
		# ncview geo_em.d01.nc
		cp -rf geo_em.* *.png plotgrids_new.ncl wrf_wps_ter.ncl namelist.wps $pathToResults
	fi
	
	if [[ "$MAP_PROJ" == "lat-lon" ]]
	then
		DX=$(ncdump -h geo_em.d01.nc | grep -oP '(?<=:DX = )[+-]?[0-9]+([.][0-9]+)?')
		DY=$(ncdump -h geo_em.d01.nc | grep -oP '(?<=:DY = )[+-]?[0-9]+([.][0-9]+)?')
	fi
	NUM_METGRID_LEVELS=$(ncdump -h "met_em.d01.$START_DATE.nc" | grep -oP '(?<=num_metgrid_levels = )[0-9]+;?')
	NUM_METGRID_SOIL_LEVELS=$(ncdump -h "met_em.d01.$START_DATE.nc" | grep -oP '(?<=num_st_layers = )[0-9]+;?')
	popd > /dev/null
	
	##############################################################################################
	## WRF
	cp namelist.input wrf_Surface*.ncl $pathToWRF
	pushd $pathToWRF > /dev/null
	DICTS="namelist.input wrf_Surface1.ncl wrf_Surface2.ncl wrf_Surface3.ncl"
	if [[ "$MAP_PROJ" == "lat-lon" ]]
	then
		sed -i "s/SED_DX/${DX}/g;s/SED_DY/${DY}/g" namelist.input
	fi
	sed -i "s/SED_MAX_TIME_STEP/${MAX_TIME_STEP}/g;s/SED_MIN_TIME_STEP/${MIN_TIME_STEP}/g" namelist.input
	source $HOME/kode/bashScripts/sedFiles
	if [[ $2 == 1 ]]
	then
		rm -f rsl.* met_em* wrfout* wrfbdy_* wrfinput_d0* *.png *.avi *.gif *.mpeg *.ogg
	
		ln -sf ../../WPS/met_em* .	
		mpirun -np $NP $pathToWRF/real.exe
		# tail rsl.error.0000
		mpirun -np $NP $pathToWRF/wrf.exe
		# tail -F rsl.out.0000
		# tail rsl.error.0000
	fi
	rm -rf $pathToResults/wrfout_d* $pathToResults/wrf_Surface*.ncl $pathToResults/namelist.input
	mv wrfout_d* $pathToResults
	cp -ruf *.png wrf_Surface*.ncl namelist.input $pathToResults
	popd > /dev/null
	
	##############################################################################################
	## Post processing
	if [[ $3 == 1 ]]
	then
		cp extractData.py $pathToResults
		pushd $pathToResults > /dev/null
		rm *.vts *.pvd
		for i_domain in $(seq -f "%02g" 1 ${MAX_DOM})
		do
			temp="wrf_Surface3_d${i_domain}.ncl"
			cp "wrf_Surface3.ncl" "$temp" 
			sed -i "s/SED_I_DOMAIN/$i_domain/g" $temp
			#ncl "$temp"
			#idt plt_Surface3.ncgm # Animate result in a GUI. Assumes NCL_OUTPUT_TYPE="ncgm"
			#convert -delay 100 *.png "anim_d${i_domain}.mpeg"
			#python3 ~/kode/python/WRF2VTK.py -v T,T2,CLDFRA -w U:U:V:W,P wrfout_d${i_domain}*
			#rename "s/(.*)\$/d${i_domain}_\$1/" surface*.vts
			#rename "s/(.*)\$/d${i_domain}_\$1/" atm*.vts
			#sed -i "s/surface/d${i_domain}_surface/g" surface.pvd
			#sed -i "s/atm/d${i_domain}_atm/g" atm.pvd
			#mv surface.pvd d${i_domain}_surface.pvd
			#mv atm.pvd d${i_domain}_atm.pvd
			wrfName="wrfout_d${i_domain}"
			mv ${wrfName}* "${wrfName}.nc"
			wrfName="${wrfName}.nc"
			if [[ "$RUNGLOBAL" = true ]]
			then
				siso -f pvd $wrfName --coords geocentric -l P,T,U,V,W,T2,U10,V10 --planar --periodic
			else
				siso -f pvd $wrfName --coords geocentric -l P,T,U,V,W,T2,U10,V10 --planar
			fi
		done
		python3 extractData.py --extract_wrf
		popd > /dev/null
	fi
	if [ "$loopForecast" = true ]
	then
		START_SIM_DATE=$(date -u +'%Y-%m-%d %H:%M:%S' --date="$START_SIM_DATE UTC + $RUN_DAYS days + $RUN_HOURS hours + $RUN_MINUTES minutes + $RUN_SECONDS seconds")
		for collector in $VARIABLES 
		do
			eval "D_${collector}=\"\""
		done
	else
		exit 1
	fi
done
