#!/bin/bash
#CASE="global"
#CASE="global"
#CASE="Bessaker"
#CASE="SN71990"
#CASE="Frankfurt_Era5"
#CASE="Frankfurt_10800"
#CASE="Frankfurt_10800_fine"
#CASE="SN76914" # Rikshospitalet in Oslo
#CASE="Elverum" # Sykehuset innlandet Elverum 
#CASE="SN18700" # OSLO - BLINDERN
#CASE="ATBcase1" # OSLO - BLINDERN
#CASE="nested"
#CASE="YR"
#CASE="Sula"
CASE="debug"
if [ -z "$DISPLAY" ]
then
	echo "Error: set the DISPLAY variable" #The display variable should be set for post processing purposes in paraview. This issue arises when using screen, and can be resolved by first getting the display variable outside the screen session (echo $DISPLAY) and then inside the screen session setting the variable to this value (i.e. export DISPLAY=localhost:10.0)"
fi
source $HOME/kode/bashScripts/sourceWRF
pathToWPS="$WRFDIRECTORY/Build_WRF/WPS"
pathToWRF="$WRFDIRECTORY/Build_WRF/WRF/run"
loopForecast=true
clearNCEPdata=false
extractYRdata=false
delete_wpsOutputFiles=false
runPreproc=true
forecastDataFolder=$HOME/results/forecastData
wrfStudiesFolder=$HOME/kode/wrfStudies
plotResultsInParaview=false
plotNCLresults=true
NCL_OUTPUT_TYPE="png" # 'x11', 'pdf', 'ps', 'ncgm', 'png'
extractOptions="--folder=$forecastDataFolder/"
CYCLE_INTERVAL=24
NP=32
GFS_RES="0p25"
if [[ $CASE == "debug" ]]
then
    GFS_RES="0p25"
    NP=2
    loopForecast=false
    START_SIM_DATE="2021-09-05 00:00:00"
elif [[ $CASE == "Bessaker" ]]
then
    CYCLE_INTERVAL=6
elif [[ $CASE == "Sula" ]]
then
    CYCLE_INTERVAL=6
elif [[ $CASE == "Frankfurt_10800" ]]
then
    CYCLE_INTERVAL=12
    loopForecast=false
elif [[ $CASE == "Frankfurt_10800_fine" ]]
then
    CYCLE_INTERVAL=12
    loopForecast=false
fi
extraNamelistOptions="--gfsres $GFS_RES --ncepuserfilename NCEPuserDataJVV.json"
if [[ $CASE == "global" ]]
then
    extraNamelistOptions="$extraNamelistOptions --runglobal $RUNGLOBAL"
    RUNGLOBAL=true
else
    RUNGLOBAL=false
fi
#START_SIM_DATE="2021-03-02 12:00:00"
#START_SIM_DATE="2021-05-23 12:00:00"
#START_SIM_DATE="2021-08-11 12:00:00"
#START_SIM_DATE="2021-07-15 12:00:00"
#START_SIM_DATE="2020-10-31 12:00:00"
#START_SIM_DATE="2020-12-05 12:00:00"
#START_SIM_DATE="2021-09-05 00:00:00"
#START_SIM_DATE="2021-05-01 12:00:00"
#START_SIM_DATE="2021-09-19 00:00:00"
#START_SIM_DATE="2020-11-19 00:00:00"
#START_SIM_DATE="2020-11-06 12:00:00"
START_SIM_DATE="2021-07-10 12:00:00"
mkdir -p $HOME/results/WRF/$CASE
while true
do
    timer_start=$(date +%s)
    echo "Running WRF program for date "$START_SIM_DATE
	if [[ "$loopForecast" = true ]]
	then
		current_epoch=$(date -u +%s)
		TODAY="$(date -u +'%Y-%m-%d')" # Get date in UTC
		target_epoch=$(date -u +'%s' --date="$START_SIM_DATE UTC + 7 hour")
		sleep_seconds=$(( $target_epoch - $current_epoch ))
		date1=$((`date -u +%s` + $sleep_seconds))
		while [ "$date1" -ge `date -u +%s` ]
		do
			echo -ne "Time until start of program: $(date -u --date @$(($date1 - `date +%s` )) +%H:%M:%S)\r";
		done
		mkdir -p $forecastDataFolder
        if [[ "$extractYRdata" = true ]]
        then
            python3 extractData.py $extractOptions --extract_yr
        fi

		current_epoch=$(date -u +%s)
		TODAY="$(date -u +'%Y-%m-%d')" # Get date in UTC
		target_epoch=$(date -u +'%s' --date="$START_SIM_DATE UTC + 6 hour")
		sleep_seconds=$(( $target_epoch - $current_epoch ))
		date1=$((`date -u +%s` + $sleep_seconds))
		while [ "$date1" -ge `date -u +%s` ]
		do
			echo -ne "Time until extraction of data: $(date -u --date @$(($date1 - `date +%s` )) +%H:%M:%S)\r";
		done
	fi

    ##############################################################################################
    ## WPS
    COMP_START_DATE="${START_SIM_DATE:0:4}${START_SIM_DATE:5:2}${START_SIM_DATE:8:2}${START_SIM_DATE:11:2}"
    START_DATE=$(echo $START_SIM_DATE | sed 's/ /_/g')
    pathToResults="$HOME/results/WRF/$CASE/${COMP_START_DATE}"
    pathToNamelist="$wrfStudiesFolder/studies/$CASE.nml"
    mkdir -p $pathToResults $pathToResults/wps_io
    nmlInput=$wrfStudiesFolder/studies/$CASE.nml
    python3 $wrfStudiesFolder/createNamelist.py $nmlInput --start_date "$START_SIM_DATE" $extraNamelistOptions
    MAX_DOM=$(python getNamelistEntry.py $nmlInput --namelist=share --subnamelist=max_dom)
    MAP_PROJ=$(python getNamelistEntry.py $nmlInput --namelist=geogrid --subnamelist=map_proj)
	if [[ $1 == 1 ]] 
	then
        cp -f GEOGRID.TBL METGRID.TBL $pathToResults
        pushd $pathToResults > /dev/null
        
        echo "Running geogrid ..."
        ln -sf $pathToWPS/geogrid/src/geogrid.exe geogrid.exe
		mpirun -np $NP ./geogrid.exe > geogrid.log
		#./geogrid.exe > geogrid.log
        if [[ "$plotNCLresults" = true ]]
        then
            POLE_LAT=$(grep -oP '(?<=pole_lat = )[+-]?[0-9]+([.][0-9]+)?' namelist.wps )
            POLE_LON=$(grep -oP '(?<=pole_lon = )[+-]?[0-9]+([.][0-9]+)?' namelist.wps )
            STAND_LON=$(grep -oP '(?<=stand_lon = )[+-]?[0-9]+([.][0-9]+)?' namelist.wps )
            > ncl.log
            if [[ "$RUNGLOBAL" = true ]]
            then
                ncl "type=\"$NCL_OUTPUT_TYPE\"" POLE_LAT=$POLE_LAT STAND_LON=$STAND_LON $wrfStudiesFolder/plotgrids_global.ncl >> ncl.log
            else
                ncl "type=\"$NCL_OUTPUT_TYPE\"" POLE_LAT=$POLE_LAT STAND_LON=$STAND_LON $wrfStudiesFolder/plotgrids_new.ncl >> ncl.log
            fi
            for i_domain in $(seq -f "%02g" 1 ${MAX_DOM})
            do
                ncl "type=\"$NCL_OUTPUT_TYPE\"" a="addfile(\"./wps_io/geo_em.d${i_domain}.nc\",\"r\")" $wrfStudiesFolder/wrf_wps_ter.ncl >> ncl.log
                mv plt_geo_6.png "plt_geo_d${i_domain}.png"
            done
        fi
        if [[ "$plotNCLresults" = true ]]
        then
            for i_domain in $(seq -f "%02g" 1 ${MAX_DOM})
            do
                coords=$(python $wrfStudiesFolder/getNamelistEntry.py $nmlInput --namelist=misc --subnamelist=coords)
                siso -f vts --last wps_io/geo_em.d${i_domain}.nc wps_io/geo_om_d${i_domain}.vts --coords=$coords
            done

        fi
		$pathToWPS/link_grib.csh $WRFDIRECTORY/Build_WRF/DATA/GFS_${GFS_RES}_${COMP_START_DATE}
		ln -sf $pathToWPS/ungrib/Variable_Tables/Vtable.GFS Vtable
        ln -sf $pathToWPS/ungrib/src/ungrib.exe ungrib.exe
        echo "Running ungrib ..."
		mpirun -np $NP ./ungrib.exe > ungrib.log
		#./ungrib.exe > ungrib.log
        echo "Running metgrid ..."
        ln -sf $pathToWPS/metgrid/src/metgrid.exe metgrid.exe
		mpirun -np $NP ./metgrid.exe > metgrid.log
		#./metgrid.exe > metgrid.log
        if [ $NP -gt 1 ]
        then
            cat geogrid.log.* >> geogrid.log
            cat metgrid.log.* >> metgrid.log
            rm geogrid.log.* metgrid.log.*
        fi
        rm geogrid.exe ungrib.exe metgrid.exe Vtable GRIBFILE.* FILE*
	    popd > /dev/null
	fi
	##############################################################################################
	## WRF
	if [[ $2 == 1 ]]
	then
		pushd $pathToResults > /dev/null
        python3 $wrfStudiesFolder/createNamelist.py "$wrfStudiesFolder/studies/$CASE.nml" --output wrf --start_date "$START_SIM_DATE" $extraNamelistOptions

		ln -sf wps_io/met_em* .	
        WRFrunFILES=$(ls -I namelist.input $pathToWRF )
        for FILE in $WRFrunFILES; do 
            ln -sf $pathToWRF/$FILE $FILE 
        done
		mpirun -np $NP ./real.exe
		mpirun -np $NP ./wrf.exe

        rm $WRFrunFILES met_em*
        for i_domain in $(seq -f "%02g" 1 ${MAX_DOM})
        do
            wrfName="wrfout_d"$i_domain
            mv ${wrfName}_${START_DATE} ${wrfName}".nc"
        done
        cat rsl.error.* > rsl.error
        cat rsl.out.* > rsl.out
        rm rsl.error.* rsl.out.*
		popd > /dev/null
	fi
	

        
	##############################################################################################
	## Post processing
	if [[ $3 == 1 ]]
	then
		pushd $pathToResults > /dev/null
        for i_domain in $(seq -f "%02g" 1 ${MAX_DOM})
        do
            ## Plot results using ncl
            if [[ "$plotNCLresults" = true ]]
            then
                ncl "type=\"$NCL_OUTPUT_TYPE\"" a="addfile(\"./wps_io/geo_em.d${i_domain}.nc\",\"r\")" $wrfStudiesFolder/wrf_Surface3.ncl >> ncl.log
                #idt plt_Surface3.ncgm # Animate result in a GUI. Assumes NCL_OUTPUT_TYPE="ncgm"
                #convert -delay 100 plt_Surface3.*.png "anim_d${i_domain}.mpeg"
            fi

            ## ... or using Paraview
            wrfName="wrfout_d"$i_domain".nc"
            if [[ "$plotResultsInParaview" = true ]]
            then
				if [[ "$RUNGLOBAL" = true ]]
				then
					siso -f pvd $wrfName --coords geocentric -l P,T,U,V,W,T2,U10,V10,WIND --planar --periodic >> siso.log
				else
                    coords=$(python $wrfStudiesFolder/getNamelistEntry.py $nmlInput --namelist=misc --subnamelist=coords)
                    siso -f pvd $wrfName --coords=$coords -l P,T,U,V,W,T2,U10,V10,WIND --planar >> siso.log

                    #siso -f vts wrfout_d${i_domain}.nc --last --coords=$coords >> siso.log
				fi
            fi
        done
        # Extract data at mast location
		python3 $wrfStudiesFolder/extractData.py --folder=$pathToResults"/" --extract_wrf
		popd > /dev/null
	fi

    pushd $pathToResults > /dev/null
    timer_end=$(date +%s)
    echo "Case: "$CASE > wrf.log
    echo "Total simulation time: "$(date -d@$((timer_end-timer_start)) -u +%H:%M:%S) >> wrf.log
    echo "Number of processors used: "$NP >> wrf.log
    echo "Path to WPS: "$pathToWPS >> wrf.log
    echo "Path to WRF: "$pathToWRF >> wrf.log
    popd > /dev/null
	
    if [[ "$delete_wpsOutputFiles" = true ]]
    then
        rm -rf $pathToResults/wps_io
    fi
	if [ "$loopForecast" = true ]
	then
		START_SIM_DATE=$(date -u +'%Y-%m-%d %H:%M:%S' --date="$START_SIM_DATE UTC + $CYCLE_INTERVAL hours")
	else
		exit 1
	fi
done
