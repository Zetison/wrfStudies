#!/bin/bash
#CASE="global"
#CASE="global"
#CASE="SN76914" # Rikshospitalet in Oslo
CASE="SN18700" # OSLO - BLINDERN
#CASE="nested"
#CASE="YR"
#CASE="debug"
name=${1:-$CASE}
if [ -z "$DISPLAY" ]
then
	echo "Error: set the DISPLAY variable" #The display variable should be set for post processing purposes in paraview. This issue arises when using screen, and can be resolved by first getting the display variable outside the screen session (echo $DISPLAY) and then inside the screen session setting the variable to this value (i.e. export DISPLAY=localhost:10.0)"
fi
source $HOME/kode/bashScripts/sourceWRF
loopForecast=true

SED_VARIABLES="D_I_PARENT_START D_J_PARENT_START INTERVAL_SECONDS RUN_DAYS RUN_HOURS RUN_MINUTES RUN_SECONDS TRUELAT1 TRUELAT2 REF_LAT REF_LON STAND_LON GEOG_DATA_PATH MAX_DOM START_DATE TIME_STEP NCL_OUTPUT_TYPE MAP_PROJ DX DY POLE_LAT POLE_LON D_POLAR D_SPECIFIED D_HISTORY_INTERVAL NUM_METGRID_LEVELS NUM_METGRID_SOIL_LEVELS"
while true
do
	if [[ "$loopForecast" = true ]]
	then
		current_epoch=$(date +%s)
		TODAY="$(date -u +'%Y-%m-%d')" # Get date in UTC
		target_epoch=$(date -u +'%s' --date="$TODAY + 1 days + 1 hour") # Get date in UTC
		sleep_seconds=$(( $target_epoch - $current_epoch ))
		date1=$((`date +%s` + $sleep_seconds));
		while [ "$date1" -ge `date +%s` ]; do
			echo -ne "Time until start of program: $(date -u --date @$(($date1 - `date +%s` )) +%H:%M:%S)\r";
		done
	fi
	source ./parameters
	pathToWPS="$WRFDIRECTORY/Build_WRF/WPS"
	pathToWRF="$WRFDIRECTORY/Build_WRF/WRF/run"
	pathToResults="$HOME/results/WRF/$CASE/$COMP_START_DATE"
	mkdir -p $pathToResults
	pathToFolder="$pathToWPS"
	cp -f namelist.wps plotgrids_new.ncl plotgrids_global.ncl wrf_wps_ter.ncl $pathToFolder
	if [[ ! -d "$GEOG_DATA_PATH" ]]
	then
		mkdir -p $GEOG_DATA_PATH
		echo "Downloading geog data folder $GEOG_DATA_PATH"
		pushd $WPSDATADIRECTORY > /dev/null
		wget https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_low_res_mandatory.tar.gz
		gunzip geog_low_res_mandatory.tar.gz
		tar -xf geog_low_res_mandatory.tar
		wget https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_high_res_mandatory.tar.gz
		gunzip geog_high_res_mandatory.tar.gz
		tar -xf geog_high_res_mandatory.tar
		mv -n WPS_GEOG_LOW_RES/* WPS_GEOG
		rm -rf WPS_GEOG_LOW_RES
		popd > /dev/null
	fi
	mkdir -p $WRFDIRECTORY/Build_WRF/DATA
	pushd $WRFDIRECTORY/Build_WRF/DATA > /dev/null
	$HOME/kode/bashScripts/getNCEPdata $START_DATE $END_DATE $INTERVAL_SECONDS $GFS_RES 
	popd > /dev/null
	
	pushd $pathToFolder > /dev/null
	if [[ "$RUNGLOBAL" = true ]]
	then
		sed -i '/SED_DX/d;/SED_DY/d;/SED_REF_LAT/d;/SED_REF_LON/d' namelist.wps
	fi
	if [[ "$MAP_PROJ" == "lat-lon" ]]
	then
		sed -i '/truelat1/d;/truelat2/d' namelist.wps
	else
		sed -i '/SED_POLE_LAT/d;/SED_POLE_LON/d' namelist.wps
	fi
	
	DICTS="namelist.wps plotgrids_new.ncl plotgrids_global.ncl wrf_wps_ter.ncl"
	source $HOME/kode/bashScripts/sedFiles
	rm -f *.pdf *.png
	if [[ "$RUNGLOBAL" = true ]]
	then
		ncl plotgrids_global.ncl # Plot domains
	else
		ncl plotgrids_new.ncl # Plot domains
	fi
	if [[ $1 == 1 ]] 
	then
		rm -f PFILE* FILE* met_em* geo_em* *.log.* GRIBFILE*
		mpirun -np $NP $pathToWPS/geogrid.exe | tee log.geogrid
		#$pathToWPS/geogrid.exe | tee log.geogrid
		for i_domain in $(seq -f "%02g" 1 ${MAX_DOM})
		do
			ncl a="addfile(\"./geo_em.d${i_domain}.nc\",\"r\")" wrf_wps_ter.ncl
			mv plt_geo_6.png "plt_geo_d${i_domain}.png"
		done
		$pathToWPS/link_grib.csh $WRFDIRECTORY/Build_WRF/DATA/GFS_${GFS_RES}_${COMP_START_DATE}
		ln -sf ungrib/Variable_Tables/Vtable.GFS Vtable
		mpirun -np $NP $pathToWPS/ungrib.exe | tee log.ungrib
		#$pathToWPS/ungrib.exe | tee log.ungrib
		mpirun -np $NP $pathToWPS/metgrid.exe | tee log.metgrid
		#$pathToWPS/metgrid.exe | tee log.metgrid
		# ncview geo_em.d01.nc
		cp -rf geo_em.* *.pdf *.png plotgrids_new.ncl wrf_wps_ter.ncl namelist.wps $pathToResults
	fi
	
	if [[ "$MAP_PROJ" == "lat-lon" ]]
	then
		DX=$(ncdump -h geo_em.d01.nc | grep -oP '(?<=:DX = )[+-]?[0-9]+([.][0-9]+)?')
		DY=$(ncdump -h geo_em.d01.nc | grep -oP '(?<=:DY = )[+-]?[0-9]+([.][0-9]+)?')
	fi
	NUM_METGRID_LEVELS=$(ncdump -h "met_em.d01.$START_DATE.nc" | grep -oP '(?<=num_metgrid_levels = )[0-9]+;?')
	NUM_METGRID_SOIL_LEVELS=$(ncdump -h "met_em.d01.$START_DATE.nc" | grep -oP '(?<=num_st_layers = )[0-9]+;?')
	popd > /dev/null
	
	pathToFolder="$WRFDIRECTORY/Build_WRF/WRF/run"
	cp namelist.input wrf_Surface*.ncl $pathToFolder
	pushd $pathToFolder > /dev/null
	DICTS="namelist.input wrf_Surface1.ncl wrf_Surface2.ncl wrf_Surface3.ncl"
	if [[ "$MAP_PROJ" == "lat-lon" ]]
	then
		sed -i "s/SED_DX/${DX}/g;s/SED_DY/${DY}/g" namelist.input
	fi
	sed -i "s/SED_MAX_TIME_STEP/${MAX_TIME_STEP}/g;s/SED_MIN_TIME_STEP/${MIN_TIME_STEP}/g" namelist.input
	source $HOME/kode/bashScripts/sedFiles
	if [[ $2 == 1 ]]
	then
		rm -f rsl.* met_em* wrfout* wrfbdy_* wrfinput_d0* *.png *.avi *.gif *.mpeg *.ogg
	
		ln -sf ../../WPS/met_em* .	
		mpirun -np $NP $pathToWRF/real.exe
		# tail rsl.error.0000
		mpirun -np $NP $pathToWRF/wrf.exe
		# tail -F rsl.out.0000
		# tail rsl.error.0000
	fi
	rm -rf $pathToResults/wrfout_d* $pathToResults/*.pdf $pathToResults/*.png $pathToResults/wrf_Surface*.ncl $pathToResults/namelist.input
	cp -ruf wrfout_d* *.pdf *.png wrf_Surface*.ncl namelist.input $pathToResults
	popd > /dev/null
	
	if [[ $3 == 1 ]]
	then
		cp extractData.py $pathToResults
		pushd $pathToResults > /dev/null
		rm *.vts *.pvd
		for i_domain in $(seq -f "%02g" 1 ${MAX_DOM})
		do
			temp="wrf_Surface3_d${i_domain}.ncl"
			cp "wrf_Surface3.ncl" "$temp" 
			sed -i "s/SED_I_DOMAIN/$i_domain/g" $temp
			#ncl "$temp"
			#idt plt_Surface3.ncgm # Animate result in a GUI. Assumes NCL_OUTPUT_TYPE="ncgm"
			#convert -delay 100 *.png "anim_d${i_domain}.mpeg"
			#python3 ~/kode/python/WRF2VTK.py -v T,T2,CLDFRA -w U:U:V:W,P wrfout_d${i_domain}*
			#rename "s/(.*)\$/d${i_domain}_\$1/" surface*.vts
			#rename "s/(.*)\$/d${i_domain}_\$1/" atm*.vts
			#sed -i "s/surface/d${i_domain}_surface/g" surface.pvd
			#sed -i "s/atm/d${i_domain}_atm/g" atm.pvd
			#mv surface.pvd d${i_domain}_surface.pvd
			#mv atm.pvd d${i_domain}_atm.pvd
			wrfName="wrfout_d${i_domain}"
			mv ${wrfName}* "${wrfName}.nc"
			wrfName="${wrfName}.nc"
			if [[ "$RUNGLOBAL" = true ]]
			then
				siso -f pvd $wrfName --global -l P,T,U,V,W,CLDFRA --planar --periodic
			else
				siso -f pvd $wrfName --global -l P,T,U,V,W,CLDFRA --planar
			fi
		done
		conda activate
		python3 extractData.py
		conda deactivate
		popd > /dev/null
	fi
	if [[ $loopForecast -ne true ]]
	then
		exit 1
	fi
done
