#!/bin/bash
#CASE="global"
#CASE="global"
#CASE="Bessaker"
#CASE="SN71990"
#CASE="Frankfurt"
#CASE="SN76914" # Rikshospitalet in Oslo
#CASE="Elverum" # Sykehuset innlandet Elverum 
#CASE="SN18700" # OSLO - BLINDERN
#CASE="ATBcase1" # OSLO - BLINDERN
#CASE="nested"
#CASE="YR"
CASE="debug"
if [ -z "$DISPLAY" ]
then
	echo "Error: set the DISPLAY variable" #The display variable should be set for post processing purposes in paraview. This issue arises when using screen, and can be resolved by first getting the display variable outside the screen session (echo $DISPLAY) and then inside the screen session setting the variable to this value (i.e. export DISPLAY=localhost:10.0)"
fi
source $HOME/kode/bashScripts/sourceWRF
#pathToWPS="$WRFDIRECTORY/Build_WRF/WPS" # Run WPS4.2
#pathToWRF="$WRFDIRECTORY/Build_WRF/WRF/run" # Run WRF4.2
pathToWPS="$WRFDIRECTORY/Build_WRF/WPS3" # Run WPS4.3
pathToWRF="$WRFDIRECTORY/Build_WRF/WRF3/run" # Run WRF4.3
loopForecast=false
clearNCEPdata=false
delete_wpsOutputFiles=false
assumeNCEPdataExist=false
runPreproc=true
forecastDataFolder=$HOME/results/forecastData/
wrfStudiesFolder=$HOME/kode/wrfStudies/
plotResultsInParaview=false
plotNCLresults=false
extractOptions="--folder=$forecastDataFolder"
if [[ $CASE == "debug" ]]
then
    RUN_DAYS=0
    RUN_HOURS=3
else
    RUN_DAYS=1
    RUN_HOURS=0
fi
RUN_MINUTES=0
RUN_SECONDS=0
START_HOUR=12
#START_SIM_DATE="2020-12-05 12:00:00"
#START_SIM_DATE="2021-03-02 12:00:00"
START_SIM_DATE="2021-05-23 12:00:00"
#START_SIM_DATE="$(date -u +'%Y-%m-%d') $START_HOUR:00:00" # Get date in UTC

while true
do
    echo "Running WRF program for date "$START_SIM_DATE
	if [[ "$loopForecast" = true ]]
	then
		current_epoch=$(date -u +%s)
		TODAY="$(date -u +'%Y-%m-%d')" # Get date in UTC
		target_epoch=$(date -u +'%s' --date="$START_SIM_DATE UTC")
		sleep_seconds=$(( $target_epoch - $current_epoch ))
		date1=$((`date -u +%s` + $sleep_seconds))
		while [ "$date1" -ge `date -u +%s` ]
		do
			echo -ne "Time until extraction of MetCoOp data: $(date -u --date @$(($date1 - `date +%s` )) +%H:%M:%S)\r";
		done
		mkdir -p $forecastDataFolder
		#python3 extractData.py $extractOptions --extract_yr
		python3 extractData.py $extractOptions

		current_epoch=$(date -u +%s)
		TODAY="$(date -u +'%Y-%m-%d')" # Get date in UTC
		target_epoch=$(date -u +'%s' --date="$START_SIM_DATE UTC + 6 hour")
		sleep_seconds=$(( $target_epoch - $current_epoch ))
		date1=$((`date -u +%s` + $sleep_seconds))
		while [ "$date1" -ge `date -u +%s` ]
		do
			echo -ne "Time until start of program: $(date -u --date @$(($date1 - `date +%s` )) +%H:%M:%S)\r";
		done
	fi
	source ./parameters

    ##############################################################################################
    ## WPS
    pathToResults="$HOME/results/WRF/$CASE/${COMP_START_DATE}_highres"
	if [[ "$runPreproc" = true ]]
    then
        ##############################################################################################
        ## Get NCEP data
        if [[ "$assumeNCEPdataExist" == false ]]
        then
            mkdir -p $WRFDIRECTORY/Build_WRF/DATA
            if [[ "$clearNCEPdata" = true ]]
            then
                rm -f $WRFDIRECTORY/Build_WRF/DATA/*
            fi

            pushd $WRFDIRECTORY/Build_WRF/DATA > /dev/null
            if [[ $NCEPstorageDate -ge $(date -d ${START_DATE:0:10} +%s) ]]
            then
                $HOME/kode/bashScripts/getHistoricNCEPdata $START_DATE $END_DATE $INTERVAL_SECONDS $GFS_RES 
            else
                $HOME/kode/bashScripts/getNCEPdata $START_DATE $END_DATE $INTERVAL_SECONDS $GFS_RES 
            fi
            popd > /dev/null
        fi
        
        mkdir -p $pathToResults $pathToResults/wps_io
        cp -f GEOGRID.TBL METGRID.TBL namelist.wps $pathToResults

        pushd $pathToResults > /dev/null
        if [[ "$RUNGLOBAL" = true ]]
        then
            sed -i '/SED_DX/d;/SED_DY/d;/SED_REF_LAT/d;/SED_REF_LON/d' namelist.wps
        fi
        if [[ "$MAP_PROJ" == "lat-lon" ]]
        then
            sed -i '/truelat1/d;/truelat2/d' namelist.wps
        else
            sed -i '/SED_POLE_LAT/d;/SED_POLE_LON/d' namelist.wps
        fi
        
        DICTS="namelist.wps"
        source $HOME/kode/bashScripts/sedFiles
        popd > /dev/null
    fi
    pushd $pathToResults > /dev/null
	if [[ $1 == 1 ]] 
	then
        echo "Running geogrid ..."
        ln -sf $pathToWPS/geogrid/src/geogrid.exe geogrid.exe
		mpirun -np $NP ./geogrid.exe > geogrid.log
		#./geogrid.exe >> geogrid.log
        if [[ "$plotNCLresults" = true ]]
        then
            > ncl.log
            if [[ "$RUNGLOBAL" = true ]]
            then
                ncl 'type="png"' POLE_LAT=$POLE_LAT STAND_LON=$STAND_LON $wrfStudiesFolder/plotgrids_global.ncl >> ncl.log
            else
                ncl 'type="png"' POLE_LAT=$POLE_LAT STAND_LON=$STAND_LON $wrfStudiesFolder/plotgrids_new.ncl >> ncl.log
            fi
            for i_domain in $(seq -f "%02g" 1 ${MAX_DOM})
            do
                ncl 'type="png"' a="addfile(\"./wps_io/geo_em.d${i_domain}.nc\",\"r\")" $wrfStudiesFolder/wrf_wps_ter.ncl >> ncl.log
                mv plt_geo_6.png "plt_geo_d${i_domain}.png"
            done
        fi
		$pathToWPS/link_grib.csh $WRFDIRECTORY/Build_WRF/DATA/GFS_${GFS_RES}_${COMP_START_DATE}
		ln -sf $pathToWPS/ungrib/Variable_Tables/Vtable.GFS Vtable
        ln -sf $pathToWPS/ungrib/src/ungrib.exe ungrib.exe
        echo "Running ungrib ..."
		mpirun -np $NP ./ungrib.exe > ungrib.log
		#./ungrib.exe | tee ungrib.log
        echo "Running metgrid ..."
        ln -sf $pathToWPS/metgrid/src/metgrid.exe metgrid.exe
		mpirun -np $NP ./metgrid.exe > metgrid.log
		#./metgrid.exe | tee metgrid.log
		# ncview geo_em.d01.nc
        if [ $NP -gt 1 ]
        then
            cat geogrid.log.* >> geogrid.log
            cat metgrid.log.* >> metgrid.log
            rm geogrid.log.* metgrid.log.*
        fi
        rm geogrid.exe ungrib.exe metgrid.exe Vtable GRIBFILE.* FILE*
	fi
	
	if [[ "$MAP_PROJ" == "lat-lon" ]]
	then
        DX=""
        DY=""
        for i_domain in $(seq -f "%02g" 1 ${MAX_DOM})
        do
            temp=$(ncdump -h wps_io/geo_em.d${i_domain}.nc | grep -oP '(?<=:DX = )[+-]?[0-9]+([.][0-9]+)?')
            DX=$DX$temp", "
            temp=$(ncdump -h wps_io/geo_em.d${i_domain}.nc | grep -oP '(?<=:DY = )[+-]?[0-9]+([.][0-9]+)?')
            DY=$DY$temp", "
        done
	fi
	NUM_METGRID_LEVELS=$(ncdump -h "wps_io/met_em.d01.$START_DATE.nc" | grep -oP '(?<=num_metgrid_levels = )[0-9]+;?')
	NUM_METGRID_SOIL_LEVELS=$(ncdump -h "wps_io/met_em.d01.$START_DATE.nc" | grep -oP '(?<=num_st_layers = )[0-9]+;?')
	popd > /dev/null
	##############################################################################################
	## WRF
	if [[ $2 == 1 ]]
	then
		cp namelist.input $pathToResults
		pushd $pathToResults > /dev/null
		DICTS="namelist.input" 
		if [[ "$MAP_PROJ" == "lat-lon" ]]
		then
			sed -i "s/SED_D_DX/${DX}/g;s/SED_D_DY/${DY}/g" namelist.input
		fi
		sed -i "s/SED_MAX_TIME_STEP/${MAX_TIME_STEP}/g;s/SED_MIN_TIME_STEP/${MIN_TIME_STEP}/g" namelist.input
		source $HOME/kode/bashScripts/sedFiles
	
		ln -sf wps_io/met_em* .	
        WRFrunFILES=$(ls -I namelist.input $pathToWRF )
        for FILE in $WRFrunFILES; do 
            ln -sf $pathToWRF/$FILE $FILE 
        done
		mpirun -np $NP ./real.exe
		# tail rsl.error.0000
		mpirun -np $NP ./wrf.exe
		# tail -F rsl.out.0000
		# tail rsl.error.0000

        rm $WRFrunFILES met_em*
        for i_domain in $(seq -f "%02g" 1 ${MAX_DOM})
        do
            wrfName="wrfout_d"$i_domain
            mv ${wrfName}_${START_DATE} ${wrfName}".nc"
        done
        cat rsl.error.* >> rsl.error
        cat rsl.out.* >> rsl.out
        rm rsl.error.* rsl.out.*
        rm namelist.output
		popd > /dev/null
	fi
	
	##############################################################################################
	## Post processing
	if [[ $3 == 1 ]]
	then
		pushd $pathToResults > /dev/null
        for i_domain in $(seq -f "%02g" 1 ${MAX_DOM})
        do
            ## Plot results using ncl
            if [[ "$plotNCLresults" = true ]]
            then
                ncl 'type="png"' a="addfile(\"./wps_io/geo_em.d${i_domain}.nc\",\"r\")" $wrfStudiesFolder/wrf_Surface3.ncl >> ncl.log
                #idt plt_Surface3.ncgm # Animate result in a GUI. Assumes NCL_OUTPUT_TYPE="ncgm"
                #convert -delay 100 plt_Surface3.*.png "anim_d${i_domain}.mpeg"
            fi

            ## ... or using Paraview
            wrfName="wrfout_d"$i_domain".nc"
            if [[ "$plotResultsInParaview" = true ]]
            then
				if [[ "$RUNGLOBAL" = true ]]
				then
					siso -f pvd $wrfName --coords geocentric -l P,T,U,V,W,T2,U10,V10 --planar --periodic >> siso.log
				else
					siso -f pvd $wrfName --coords geocentric -l P,T,U,V,W,T2,U10,V10 --planar >> siso.log
				fi
                #siso -f vts wrfout_d${i_domain}.nc --last --coords=utm:32u >> siso.log
            fi
        done
        # Extract data at mast location
		python3 $HOME/kode/wrfStudies/extractData.py $extractOptions --folder=$pathToResults"/" --extract_wrf
		popd > /dev/null
	fi
	
    if [[ "$delete_wpsOutputFiles" = true ]]
    then
        rm -rf $pathToResults/wps_io
    fi
	if [ "$loopForecast" = true ]
	then
		START_SIM_DATE=$(date -u +'%Y-%m-%d %H:%M:%S' --date="$START_SIM_DATE UTC + $RUN_DAYS days + $RUN_HOURS hours + $RUN_MINUTES minutes + $RUN_SECONDS seconds")
		for collector in $VARIABLES 
		do
			eval "D_${collector}=\"\""
		done
	else
		exit 1
	fi
done
