#!/bin/bash
NP=32
MAX_DOM=7
GEOG_DATA_RES="30s" #10m (~19km), 5m (~9km), 2m (~4km), and 30s (~0.9km).
INTERVAL_SECONDS=3600 # Must be >= 3600 as this is the interval the GFS data is available
GFS_RES="0p25" # resolution (in degrees) in longitude and latitude direction (NOTE: if > 0.25 (0p25) then INTERVAL_SECONDS must be > 10800)
RUN_HOURS=12
PARENT_GRID_RATIO=3
D_HISTORY_INTERVAL="1," # in minutes
MAP_PROJ="lat-lon" # Accepted projections are 'lambert', 'polar', 'mercator', and 'lat-lon.'
#MAP_PROJ="lambert" # Accepted projections are 'lambert', 'polar', 'mercator', and 'lat-lon.'
E_WE=200 # number of velocity points in east west direction
E_SN=100 # number of velocity points in south north direction
E_VERT=50 #  This number must be the same for each domain.
NCL_OUTPUT_TYPE="x11" # 'x11', 'pdf', 'ps', 'ncgm', 'png' 
D_I_PARENT_START="1, 84, 34, 34, 34, 34, 34"
D_J_PARENT_START="1, 34, 34, 34, 34, 34, 34" # 29
#D_I_PARENT_START="1, 31,"
#D_J_PARENT_START="1, 31," # 29
REF_LAT=63.414061 # Latitude of a known reference point inside the domain
REF_LON=10.407602 # Longitude of the same point as used for REF_LAT

if [[ $MAP_PROJ == "lat-lon" ]]
then
	D_POLAR=".true.,.false.,"
	D_SPECIFIED=".false.,.false.,"
	DX=$((360 / ($E_WE - 1) ))
	DY=$((180 / ($E_SN - 1) ))
	# STAND_LON, POLE_LAT and POLE_LON assumes N.H.
	POLE_LAT=$(echo "90.0 - $REF_LAT" | bc -l)   # Discretization time step
	POLE_LON=180
	STAND_LON=-$REF_LON # A real value specifying the longitude that is parallel with the y-axis in conic and azimuthal projections.
else
	STAND_LON=$REF_LON # A real value specifying the longitude that is parallel with the y-axis in conic and azimuthal projections.
	D_SPECIFIED=".true.,.false.,"
	DX=30000
	DY=30000
	D_POLAR=".false.,"
fi
n_we_1=$((E_SN/3))
n_sn_1=$((E_SN/3))
#STAND_LON=0
TIME_STEP=1 # in seconds (should be 6*dx (in km))
GEOG_DATA_PATH="$HOME/WPS_DATA/WPS_GEOG"
# Note that al times are UTC
START_HOUR=18 # Must be either 00, 06, 12 or 18 (these are the times the NCEP run the GFS model) Also note that the date is available only some 4 hours after the initialization time
if false
then
	START_DATE="$(date -u +'%Y-%m-%d')_$START_HOUR:00:00" # Get date in UTC
	START_YEAR=${START_DATE:0:4}
	START_MONTH=${START_DATE:5:2}
	START_DAY=${START_DATE:8:2}
else
	START_YEAR=2020
	START_MONTH=07
	START_DAY=31
	START_DATE="$START_YEAR-$START_MONTH-${START_DAY}_$START_HOUR:00:00"
fi
END_DATE=$(date -u +'%Y-%m-%d_%T' --date="${START_DATE:0:10} ${START_DATE:11} UTC + $RUN_HOURS hours")
END_YEAR=${END_DATE:0:4}
END_MONTH=${END_DATE:5:2}
END_DAY=${END_DATE:8:2}
END_HOUR=${END_DATE:11:2}

COMP_START_DATE="${START_YEAR}${START_MONTH}${START_DAY}${START_HOUR}"
START_DATE="$START_YEAR-$START_MONTH-${START_DAY}_$START_HOUR:00:00"
END_DATE="$END_YEAR-$END_MONTH-${END_DAY}_$END_HOUR:00:00"
VARIABLES="PARENT_ID PARENT_GRID_RATIO E_WE E_SN E_VERT START_YEAR START_MONTH START_DAY START_HOUR END_YEAR END_MONTH END_DAY END_HOUR START_DATE END_DATE GEOG_DATA_RES"
for i in $(seq 1 $MAX_DOM)
do
	for sed_variable in $VARIABLES 
	do
		temp="${sed_variable}_$i"
		if [[ ! -v $temp && -v $sed_variable ]];
		then
			eval "$temp=\$${sed_variable}"
		fi
		SED_VARIABLES="$SED_VARIABLES $temp"
	done
	if [[ $i == 1 ]]
	then
		PARENT_GRID_RATIO_1=1
		PARENT_ID_1=1
		PARENT_ID_2=1
		I_PARENT_START_1=1
		J_PARENT_START_1=1
	else
		temp="n_we_$i"
		if [[ ! -v $temp ]];
		then
			im1=$(($i-1))
			eval "$temp=\$((\$n_we_$im1))"
		fi
		temp="n_sn_$i"
		if [[ ! -v $temp ]];
		then
			im1=$(($i-1))
			eval "$temp=\$((\$n_sn_$im1))"
		fi
		eval "E_WE_$i=\$((\$n_we_$i * \$PARENT_GRID_RATIO_$i + 1))"
		eval "E_SN_$i=\$((\$n_sn_$i * \$PARENT_GRID_RATIO_$i + 1))"
		eval "PARENT_GRID_RATIO_$i=3"
		temp="I_PARENT_START_$i"
		if [[ ! -v $temp ]];
		then
			eval "$temp=\$((\$E_WE_$i / 3))"
		fi
		temp="J_PARENT_START_$i"
		if [[ ! -v $temp ]];
		then
			eval "$temp=\$((\$E_SN_$i / 3))"
		fi
	fi
	if [[ $i > 2 ]]
	then
		eval "PARENT_ID_$i=$(($i - 1))"
	fi
	for collector in $VARIABLES
	do
		temp="${collector}_$i"
		eval "temp=\$${temp}"
		re='^[0-9]+$'
		if ! [[ $temp =~ $re ]];
		then
			if [[ ! -v D_${collector} ]]
			then
				eval "D_${collector}=\"'$temp',\""
			else
				eval "D_${collector}=\"\$D_${collector} '$temp',\""
			fi
		else
			if [[ ! -v D_${collector} ]]
			then
				eval "D_${collector}=\"$temp,\""
			else
				eval "D_${collector}=\"\$D_${collector} $temp,\""
			fi
		fi
	done
done
COLLECTORS=$(echo "$VARIABLES" | sed 's/[^ ]*/D_&/g')
SED_VARIABLES="$SED_VARIABLES $COLLECTORS"

