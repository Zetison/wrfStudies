#!/bin/bash
#CASE="global"
#CASE="global"
#CASE="Bessaker"
#CASE="SN71990"
CASE="Frankfurt"
#CASE="SN76914" # Rikshospitalet in Oslo
#CASE="Elverum" # Sykehuset innlandet Elverum 
#CASE="SN18700" # OSLO - BLINDERN
#CASE="ATBcase1" # OSLO - BLINDERN
#CASE="nested"
#CASE="YR"
#CASE="debug"
if [ -z "$DISPLAY" ]
then
	echo "Error: set the DISPLAY variable" #The display variable should be set for post processing purposes in paraview. This issue arises when using screen, and can be resolved by first getting the display variable outside the screen session (echo $DISPLAY) and then inside the screen session setting the variable to this value (i.e. export DISPLAY=localhost:10.0)"
fi
source $HOME/kode/bashScripts/sourceWRF
#pathToWPS="$WRFDIRECTORY/Build_WRF/WPS" # Run WPS4.2
#pathToWRF="$WRFDIRECTORY/Build_WRF/WRF/run" # Run WRF4.2
pathToWPS="$WRFDIRECTORY/Build_WRF/WPS3" # Run WPS4.3
pathToWRF="$WRFDIRECTORY/Build_WRF/WRF3/run" # Run WRF4.3
loopForecast=true
clearNCEPdata=false
delete_wpsOutputFiles=false
assumeNCEPdataExist=false
runPreproc=true
forecastDataFolder=$HOME/results/forecastData/
wrfStudiesFolder=$HOME/kode/wrfStudies/
plotResultsInParaview=false
plotNCLresults=false
extractOptions="--folder=$forecastDataFolder"
if [[ $CASE == "debug" ]]
then
    RUN_DAYS=0
    RUN_HOURS=3
else
    RUN_DAYS=1
    RUN_HOURS=12
fi
RUN_MINUTES=0
RUN_SECONDS=0
START_HOUR=12
#START_SIM_DATE="2020-12-05 12:00:00"
#START_SIM_DATE="2021-03-02 12:00:00"
START_SIM_DATE="2021-05-23 12:00:00"
START_SIM_DATE="2021-07-26 12:00:00"
#START_SIM_DATE="$(date -u +'%Y-%m-%d') $START_HOUR:00:00" # Get date in UTC

while true
do
    echo "Extracting data for date "$START_SIM_DATE
	if [[ "$loopForecast" = true ]]
	then
		current_epoch=$(date -u +%s)
		TODAY="$(date -u +'%Y-%m-%d')" # Get date in UTC
		target_epoch=$(date -u +'%s' --date="$START_SIM_DATE UTC")
		sleep_seconds=$(( $target_epoch - $current_epoch ))
		date1=$((`date -u +%s` + $sleep_seconds))
		while [ "$date1" -ge `date -u +%s` ]
		do
			echo -ne "Time until extraction of MetCoOp data: $(date -u --date @$(($date1 - `date +%s` )) +%H:%M:%S)\r";
		done
		mkdir -p $forecastDataFolder
		python3 extractData.py $extractOptions --extract_yr

		current_epoch=$(date -u +%s)
		TODAY="$(date -u +'%Y-%m-%d')" # Get date in UTC
		target_epoch=$(date -u +'%s' --date="$START_SIM_DATE UTC + 6 hour")
		sleep_seconds=$(( $target_epoch - $current_epoch ))
		date1=$((`date -u +%s` + $sleep_seconds))
		while [ "$date1" -ge `date -u +%s` ]
		do
			echo -ne "Time until extraction of data: $(date -u --date @$(($date1 - `date +%s` )) +%H:%M:%S)\r";
		done
	fi
	source ./parameters

    ##############################################################################################
    ## WPS
	if [[ "$runPreproc" = true ]]
    then
        ##############################################################################################
        ## Get NCEP data
        if [[ "$assumeNCEPdataExist" == false ]]
        then
            mkdir -p $WRFDIRECTORY/Build_WRF/DATA
            if [[ "$clearNCEPdata" = true ]]
            then
                rm -f $WRFDIRECTORY/Build_WRF/DATA/*
            fi

            pushd $WRFDIRECTORY/Build_WRF/DATA > /dev/null
            if [[ $NCEPstorageDate -ge $(date -d ${START_DATE:0:10} +%s) ]]
            then
                $HOME/kode/bashScripts/getHistoricNCEPdata $START_DATE $END_DATE $INTERVAL_SECONDS $GFS_RES 
            else
                $HOME/kode/bashScripts/getNCEPdata $START_DATE $END_DATE $INTERVAL_SECONDS $GFS_RES 
            fi
            popd > /dev/null
        fi
    fi
	if [ "$loopForecast" = true ]
	then
		START_SIM_DATE=$(date -u +'%Y-%m-%d %H:%M:%S' --date="$START_SIM_DATE UTC + 24 hours")
	else
		exit 1
	fi
done
