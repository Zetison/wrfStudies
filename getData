#!/bin/bash
#CASE="global"
#CASE="global"
#CASE="Bessaker"
#CASE="SN71990"
#CASE="Frankfurt"
#CASE="Sula"
#CASE="SN76914" # Rikshospitalet in Oslo
#CASE="Elverum" # Sykehuset innlandet Elverum 
#CASE="SN18700" # OSLO - BLINDERN
#CASE="ATBcase1" # OSLO - BLINDERN
#CASE="nested"
#CASE="YR"
CASE="debug"
source $HOME/kode/bashScripts/sourceWRF
#pathToWPS="$WRFDIRECTORY/Build_WRF/WPS" # Run WPS4.2
#pathToWRF="$WRFDIRECTORY/Build_WRF/WRF/run" # Run WRF4.2
pathToWPS="$WRFDIRECTORY/Build_WRF/WPS3" # Run WPS4.3
pathToWRF="$WRFDIRECTORY/Build_WRF/WRF3/run" # Run WRF4.3
loopForecast=false
clearNCEPdata=false
delete_wpsOutputFiles=false
assumeNCEPdataExist=false
runPreproc=true
forecastDataFolder=$HOME/results/forecastData/
wrfStudiesFolder=$HOME/kode/wrfStudies/
plotResultsInParaview=false
plotNCLresults=false
extractOptions="--folder=$forecastDataFolder"
CYCLE_INTERVAL=24
GFS_RES="0p25"
if [[ $CASE == "debug" ]]
then
    RUN_DAYS=0
    RUN_HOURS=3
    GFS_RES="1p00"
elif [[ $CASE == "Sula" ]]
then
    RUN_DAYS=0
    RUN_HOURS=12
    CYCLE_INTERVAL=6
else
    RUN_DAYS=1
    RUN_HOURS=12
fi
RUN_MINUTES=0
RUN_SECONDS=0
START_HOUR=12
#START_SIM_DATE="2020-12-05 12:00:00"
#START_SIM_DATE="2021-03-02 12:00:00"
START_SIM_DATE="2021-05-23 12:00:00"
START_SIM_DATE="2021-07-26 12:00:00"
START_SIM_DATE="2020-10-31 12:00:00"
#START_SIM_DATE="$(date -u +'%Y-%m-%d') $START_HOUR:00:00" # Get date in UTC
START_SIM_DATE="2020-12-05 12:00:00"
START_SIM_DATE="2021-09-02 12:00:00"

while true
do
    echo "Extracting data for date "$START_SIM_DATE
	if [[ "$loopForecast" = true ]]
	then
		current_epoch=$(date -u +%s)
		TODAY="$(date -u +'%Y-%m-%d')" # Get date in UTC
		target_epoch=$(date -u +'%s' --date="$START_SIM_DATE UTC")
		sleep_seconds=$(( $target_epoch - $current_epoch ))
		date1=$((`date -u +%s` + $sleep_seconds))
		while [ "$date1" -ge `date -u +%s` ]
		do
			echo -ne "Time until extraction of MetCoOp data: $(date -u --date @$(($date1 - `date +%s` )) +%H:%M:%S)\r";
		done
		mkdir -p $forecastDataFolder
		python3 extractData.py $extractOptions --extract_yr

		current_epoch=$(date -u +%s)
		TODAY="$(date -u +'%Y-%m-%d')" # Get date in UTC
		target_epoch=$(date -u +'%s' --date="$START_SIM_DATE UTC + 6 hour")
		sleep_seconds=$(( $target_epoch - $current_epoch ))
		date1=$((`date -u +%s` + $sleep_seconds))
		while [ "$date1" -ge `date -u +%s` ]
		do
			echo -ne "Time until extraction of data: $(date -u --date @$(($date1 - `date +%s` )) +%H:%M:%S)\r";
		done
	fi
	source ./parameters
    pathToNamelist="$wrfStudiesFolder/studies/$CASE.nml"
    INTERVAL_SECONDS=$(grep -oP '(?<=interval_seconds       = )[+-]?[0-9]+([.][0-9]+)?' $pathToNamelist )
    echo "Interval seconds = "$INTERVAL_SECONDS
    START_DATE="${START_YEAR}-${START_MONTH}-${START_DAY}_${START_HOUR}:${START_MINUTE}:${START_SECOND}"
    if [[ "$RUNGLOBAL" = true ]]
    then
        END_DATE=$START_DATE # only initial conditions are needed for a global run
    else
        END_DATE=$(date -u +'%Y-%m-%d_%T' --date="${START_DATE:0:10} ${START_DATE:11} UTC + $RUN_DAYS days + $RUN_HOURS hours + $RUN_MINUTES minutes + $RUN_SECONDS seconds")
    fi

    ##############################################################################################
    ## WPS
	if [[ "$runPreproc" = true ]]
    then
        ##############################################################################################
        ## Get NCEP data
        if [[ "$assumeNCEPdataExist" == false ]]
        then
            mkdir -p $WRFDIRECTORY/Build_WRF/DATA
            if [[ "$clearNCEPdata" = true ]]
            then
                rm -f $WRFDIRECTORY/Build_WRF/DATA/*
            fi

            pushd $WRFDIRECTORY/Build_WRF/DATA > /dev/null
            if [[ $NCEPstorageDate -ge $(date -d ${START_DATE:0:10} +%s) ]]
            then
                $HOME/kode/bashScripts/getHistoricNCEPdata $START_DATE $END_DATE $INTERVAL_SECONDS $GFS_RES 
            else
                $HOME/kode/bashScripts/getNCEPdata $START_DATE $END_DATE $INTERVAL_SECONDS $GFS_RES 
            fi
            popd > /dev/null
        fi
    fi
	if [ "$loopForecast" = true ]
	then
		START_SIM_DATE=$(date -u +'%Y-%m-%d %H:%M:%S' --date="$START_SIM_DATE UTC + $CYCLE_INTERVAL hours")
	else
		exit 1
	fi
done
