#!/bin/bash
NP=32
NP=4
MAX_DOM=1
#GEOG_DATA_RES="usgs_lakes+default"
GEOG_DATA_RES="default"
GFS_RES="0p25" # resolution (in degrees) in longitude and latitude direction (NOTE: if > 0.25 (0p25) then INTERVAL_SECONDS must be > 10800) First 120 hours available hourly, after that every 3 hours

START_YEAR=${START_SIM_DATE:0:4}
START_MONTH=${START_SIM_DATE:5:2}
START_DAY=${START_SIM_DATE:8:2}
START_HOUR=${START_SIM_DATE:11:2}
START_MINUTE=${START_SIM_DATE:14:2}
START_SECOND=${START_SIM_DATE:17:2}

PARENT_GRID_RATIO=3
MAP_PROJ="lat-lon" # Accepted projections are 'lambert', 'polar', 'mercator', and 'lat-lon.'
#MAP_PROJ="lambert" # Accepted projections are 'lambert', 'polar', 'mercator', and 'lat-lon.'
REF_LAT=63.414061 # Latitude of a known reference point inside the domain
REF_LON=10.407602 # Longitude of the same point as used for REF_LAT
TRUELAT1=75
TRUELAT2=45
RUNGLOBAL=false
NCL_OUTPUT_TYPE="png" # 'x11', 'pdf', 'ps', 'ncgm', 'png'
# In order for (REF_LAT REF_LON) to be included as a coordinate in centered nested domains one should have E_WE = 3*n+1, E_SN = 3*m+1 for some integer n and m

USE_ADAPTIVE_TIME_STEP=".true."
#USE_ADAPTIVE_TIME_STEP=".false."
PARM_CONF=0
FRAMES_PER_OUTFILE=1000000
HISTORY_INTERVAL=600
#STAND_LON=0
GEOG_DATA_PATH="$HOME/WPS_DATA/WPS_GEOG"
# Note that al times are UTC

if [[ $CASE == "global" ]]
then
	PARM_CONF=0
	PARM_CONF=5
	GFS_RES="0p25" # resolution (in degrees) in longitude and latitude direction. First 120 hours available hourly, after that every 3 hours. Available resolutions: 1p00 (~111km), 0p50 (~55.7km), 0p25 (27.6km)
	# For global runs E_WE should be 2^P*3^Q*5^R+1 for integers P,Q,R in {0,1,2,...}. E.g. (E_WE,E_SN) in {(21 11), (25 13), (31 16), (37 19), (41 21), (61 31), (73 37), (91 46), (121 61), (181 91), (361 181), (721 361), (1081 541), (1441 721), ...}
	E_WE=721 # number of velocity points in east west direction
	E_SN=361 # number of velocity points in south north direction
	E_WE=361 # number of velocity points in east west direction
	E_SN=181 # number of velocity points in south north direction
	#E_WE=181 # number of velocity points in east west direction
	#E_SN=91 # number of velocity points in south north direction
	E_WE=41 # number of velocity points in east west direction
	E_SN=21 # number of velocity points in south north direction
	E_VERT=50 # number of points in the vertical directions. This number must be the same for each domain.  
	RUN_DAYS=30
	RUN_HOURS=0
	D_I_PARENT_START="1, 84, 34, 34, 34, 34, 34,"
	D_J_PARENT_START="1, 34, 34, 34, 34, 34, 34," # 29
	#D_HISTORY_INTERVAL="3600, 3600, 3600, 3600, 3600, 3600, 3600," # in seconds
	USE_ADAPTIVE_TIME_STEP=".true."
	REF_LAT=0 # Latitude of a known reference point inside the domain
	REF_LON=0 # Longitude of the same point as used for REF_LAT
	RUNGLOBAL=true
elif [[ $CASE == "ATBcase1" ]] || [[ $CASE == "ATBcase2" ]] 
then
	MAX_DOM=4
	MAP_PROJ="lat-lon" # Accepted projections are 'lambert', 'polar', 'mercator', and 'lat-lon.'
	DX=0.25
	DY=0.25
	GFS_RES="0p25" # resolution (in degrees) in longitude and latitude direction (NOTE: if > 0.25 (0p25) then INTERVAL_SECONDS must be > 10800) First 120 hours available hourly, after that every 3 hours
	E_WE=100 # number of velocity points in east west direction
	E_SN=100 # number of velocity points in south north direction
	E_VERT=50 #  This number must be the same for each domain.
	RUN_DAYS=0

	#D_HISTORY_INTERVAL="600, 600, 600, 600, 600, 600, 600," # in seconds
	# Use Blindern location:
	REF_LAT=59.9423 # Latitude of a known reference point inside the domain
	REF_LON=10.72 # Longitude of the same point as used for REF_LAT
	START_YEAR=2020
	if [[ $CASE == "ATBcase1" ]] 
	then # case 1
		START_MONTH=02
		START_DAY=09
		START_HOUR=06
		RUN_HOURS=6
	else
		START_MONTH=04
		START_DAY=13
		START_HOUR=12
		RUN_HOURS=6
	fi
elif [[ $CASE == "nested" ]]
then
	MAX_DOM=7
	GFS_RES="0p25" # resolution (in degrees) in longitude and latitude direction (NOTE: if > 0.25 (0p25) then INTERVAL_SECONDS must be > 10800) First 120 hours available hourly, after that every 3 hours
	E_WE=201 # number of velocity points in east west direction
	E_SN=101 # number of velocity points in south north direction
	E_VERT=50 #  This number must be the same for each domain.
	RUN_DAYS=0
	RUN_HOURS=3
	D_I_PARENT_START="1, 84, 34, 34, 34, 34, 34,"
	D_J_PARENT_START="1, 34, 34, 34, 34, 34, 34," # 29
	#D_HISTORY_INTERVAL="60, 60, 60, 60, 60, 60, 60, 60," # in seconds
	REF_LAT=63.414061 # Latitude of a known reference point inside the domain
	REF_LON=10.407602 # Longitude of the same point as used for REF_LAT
elif [[ $CASE == "YR" ]]
then
	E_WE=400 # number of velocity points in east west direction
	E_SN=400 # number of velocity points in south north direction
	E_VERT=51 #  This number must be the same for each domain.
	#D_HISTORY_INTERVAL="3600, 3600, 3600, 3600, 3600, 3600, 3600," # in seconds
	MAP_PROJ="lambert"
	DX=2500
	DY=2500
	REF_LAT=66 # Latitude of a known reference point inside the domain
	REF_LON=12 # Longitude of the same point as used for REF_LAT
	RUN_HOURS=66
elif  [[ $CASE == "Sula" ]]
then
	NP=8
	PARM_CONF=0
	MAX_DOM=6
	MAP_PROJ="lat-lon" # Accepted projections are 'lambert', 'polar', 'mercator', and 'lat-lon.'
	#MAP_PROJ="lambert" # Accepted projections are 'lambert', 'polar', 'mercator', and 'lat-lon.'
	DX=0.25
	DY=0.25
	#DX=9000
	#DY=9000
	GFS_RES="0p25" # resolution (in degrees) in longitude and latitude direction (NOTE: if > 0.25 (0p25) then INTERVAL_SECONDS must be > 10800) First 120 hours available hourly, after that every 3 hours
	#GFS_RES="1p00" # resolution (in degrees) in longitude and latitude direction (NOTE: if > 0.25 (0p25) then INTERVAL_SECONDS must be > 10800) First 120 hours available hourly, after that every 3 hours
	E_WE=100 # number of velocity points in east west direction
	E_SN=100 # number of velocity points in south north direction
	E_VERT=50 #  This number must be the same for each domain.
	#E_WE=16 # number of velocity points in east west direction
	#E_SN=16 # number of velocity points in south north direction
	#E_VERT=33 #  This number must be the same for each domain.
    REF_LAT=62.4234363 # Latitude of a known reference point inside the domain
    REF_LON=6.0321708 # Longitude of the same point as used for REF_LAT
    REF_LON=6.0321708 # Longitude of the same point as used for REF_LAT
    #GEOG_DATA_RES="sula+default" 
    D_GEOG_DATA_RES="'default', 'default', 'default', 'default', 'sula+default', 'sula+default'," 
elif [[ $CASE == "SN76914" ]] || [[ $CASE == "SN18700" ]] || [[ $CASE == "Elverum" ]] || [[ $CASE == "Bessaker" ]] || [[ $CASE == "SN71990" ]] || [[ $CASE == "Frankfurt" ]]
then
	#NP=1
	PARM_CONF=0
	MAX_DOM=4
	MAP_PROJ="lat-lon" # Accepted projections are 'lambert', 'polar', 'mercator', and 'lat-lon.'
	#MAP_PROJ="lambert" # Accepted projections are 'lambert', 'polar', 'mercator', and 'lat-lon.'
	DX=0.25
	DY=0.25
	#DX=9000
	#DY=9000
	GFS_RES="0p25" # resolution (in degrees) in longitude and latitude direction (NOTE: if > 0.25 (0p25) then INTERVAL_SECONDS must be > 10800) First 120 hours available hourly, after that every 3 hours
	#GFS_RES="1p00" # resolution (in degrees) in longitude and latitude direction (NOTE: if > 0.25 (0p25) then INTERVAL_SECONDS must be > 10800) First 120 hours available hourly, after that every 3 hours
	E_WE=100 # number of velocity points in east west direction
	E_SN=100 # number of velocity points in south north direction
	E_VERT=50 #  This number must be the same for each domain.
	#E_VERT=138 #  This number must be the same for each domain.
	#E_WE=16 # number of velocity points in east west direction
	#E_SN=16 # number of velocity points in south north direction
	#E_VERT=33 #  This number must be the same for each domain.

	#D_HISTORY_INTERVAL="600, 600, 600, 600, 600, 600, 600," # in seconds
	#D_HISTORY_INTERVAL="31,31,31,31,31,31,31,31," # in seconds
	#D_HISTORY_INTERVAL="10,10,10,10,10,10,10," # in seconds
	#D_HISTORY_INTERVAL="2,2,2,2,2,2,2,2,2," # in seconds
	#D_HISTORY_INTERVAL="1,1,1,1,1,1,1," # in seconds
	if [[ $CASE == "SN76914" ]]
	then
		REF_LAT=59.9492 # Latitude of a known reference point inside the domain
		REF_LON=10.715 # Longitude of the same point as used for REF_LAT
	elif [[ $CASE == "Bessaker" ]]
	then
		REF_LAT=64.2233001 # Latitude of a known reference point inside the domain (Bessakerfjellet)
		REF_LON=10.3727204 # Longitude of the same point as used for REF_LAT
	elif [[ $CASE == "SN71990" ]]
	then
		REF_LAT=64.4013 # Latitude of a known reference point inside the domain (BuholmrÃ¥sa fyr)
		REF_LON=10.455 # Longitude of the same point as used for REF_LAT
	elif [[ $CASE == "Frankfurt" ]]
	then
		REF_LAT=50.02528 # Latitude of a known reference point inside the domain
		REF_LON=8.51962 # Longitude of the same point as used for REF_LAT
	elif [[ $CASE == "Elverum" ]]
	then
		REF_LAT=60.8771324 # Latitude of a known reference point inside the domain
		REF_LON=11.5700942 # Longitude of the same point as used for REF_LAT
	else
		REF_LAT=59.9423 # Latitude of a known reference point inside the domain
		REF_LON=10.72 # Longitude of the same point as used for REF_LAT
	fi
elif [[ $CASE == "debug" ]]
then
    GEOG_DATA_RES="default"
    #GEOG_DATA_RES="lowres+default" # use lowres data to speed up preprocessing
	PARM_CONF=0
	MAX_DOM=4
	MAP_PROJ="lat-lon" # Accepted projections are 'lambert', 'polar', 'mercator', and 'lat-lon.'
	DX=0.25
	DY=0.25
	GFS_RES="0p25" # resolution (in degrees) in longitude and latitude direction (NOTE: if > 0.25 (0p25) then INTERVAL_SECONDS must be > 10800) First 120 hours available hourly, after that every 3 hours
	#GFS_RES="1p00" # resolution (in degrees) in longitude and latitude direction (NOTE: if > 0.25 (0p25) then INTERVAL_SECONDS must be > 10800) First 120 hours available hourly, after that every 3 hours
	NP=1
	E_WE=16 # number of velocity points in east west direction
	E_SN=16 # number of velocity points in south north direction
	E_WE=30 # number of velocity points in east west direction
	E_SN=30 # number of velocity points in south north direction
	E_VERT=50 #  This number must be the same for each domain.
	#D_HISTORY_INTERVAL="600, 600, 600, 600, 600, 600, 600," # in seconds
	REF_LAT=50.02528 # Latitude of a known reference point inside the domain
	REF_LON=8.51962 # Longitude of the same point as used for REF_LAT
fi



DIFF_6TH_OPT=0
SF_URBAN_PHYSICS=0
SST_UPDATE=0
W_DAMPING=0
MOIST_ADV_OPT=1
SCALAR_ADV_OPT=1
TKE_ADV_OPT=1
CHEM_ADV_OPT=1
DIFF_OPT=2
if [[ "$PARM_CONF" = 0 ]]
then
	CU_PHYSICS=1
	MP_PHYSICS=8
	RA_LW_PHYSICS=1
	RA_SW_PHYSICS=1
	SWINT_OPT=0
	SF_SURFACE_PHYSICS=2
	SF_SFCLAY_PHYSICS=1
	BL_PBL_PHYSICS=1
	BL_MYNN_MIXLENGTH=0
	BL_MYNN_TKEBUDGET=0
	FRACTIONAL_SEAICE=0
	SEAICE_THRESHOLD=0
	NUM_SOIL_LAYERS=4
elif [[ "$PARM_CONF" = 1 ]]
then
	CU_PHYSICS=1
	MP_PHYSICS=4
	RA_LW_PHYSICS=4
	RA_SW_PHYSICS=4
	SWINT_OPT=1
	SF_SURFACE_PHYSICS=2
	SF_SFCLAY_PHYSICS=1
	BL_PBL_PHYSICS=7
	BL_MYNN_MIXLENGTH=0
	BL_MYNN_TKEBUDGET=0
	FRACTIONAL_SEAICE=1
	SEAICE_THRESHOLD=0
	NUM_SOIL_LAYERS=2
elif [[ "$PARM_CONF" = 2 ]]
then
	CU_PHYSICS=1
	MP_PHYSICS=4
	RA_LW_PHYSICS=4
	RA_SW_PHYSICS=4
	SWINT_OPT=1
	SF_SURFACE_PHYSICS=2
	SF_SFCLAY_PHYSICS=5
	BL_PBL_PHYSICS=5
	BL_MYNN_MIXLENGTH=0
	BL_MYNN_TKEBUDGET=0
	FRACTIONAL_SEAICE=1
	SEAICE_THRESHOLD=0
	NUM_SOIL_LAYERS=4
elif [[ "$PARM_CONF" = 3 ]]
then
	CU_PHYSICS=1
	MP_PHYSICS=4
	RA_LW_PHYSICS=4
	RA_SW_PHYSICS=4
	SWINT_OPT=1
	SF_SURFACE_PHYSICS=2
	SF_SFCLAY_PHYSICS=5
	BL_PBL_PHYSICS=5
	BL_MYNN_MIXLENGTH=0
	BL_MYNN_TKEBUDGET=0
	FRACTIONAL_SEAICE=1
	SEAICE_THRESHOLD=0
	NUM_SOIL_LAYERS=4
elif [[ "$PARM_CONF" = 4 ]]
then
	CU_PHYSICS=1
	MP_PHYSICS=6
	RA_LW_PHYSICS=1
	RA_SW_PHYSICS=1
	SWINT_OPT=0
	SF_SURFACE_PHYSICS=2
	SF_SFCLAY_PHYSICS=5
	BL_PBL_PHYSICS=5
	BL_MYNN_MIXLENGTH=0
	BL_MYNN_TKEBUDGET=1
	FRACTIONAL_SEAICE=1
	SEAICE_THRESHOLD=0
	NUM_SOIL_LAYERS=4
elif [[ "$PARM_CONF" = 5 ]] # global configuration
then
	CU_PHYSICS=16
	MP_PHYSICS=3
	RA_LW_PHYSICS=4
	RA_SW_PHYSICS=4
	SWINT_OPT=0
	SF_SURFACE_PHYSICS=2
	SF_SFCLAY_PHYSICS=1
	BL_PBL_PHYSICS=1
	BL_MYNN_MIXLENGTH=0
	BL_MYNN_TKEBUDGET=1
	FRACTIONAL_SEAICE=1
	SEAICE_THRESHOLD=0
	NUM_SOIL_LAYERS=4

	W_DAMPING=1
	DIFF_OPT=0
	MOIST_ADV_OPT=0
	SCALAR_ADV_OPT=0
	TKE_ADV_OPT=0
	CHEM_ADV_OPT=0
elif [[ "$PARM_CONF" = 6 ]] # full physics
then
	CU_PHYSICS=16
	MP_PHYSICS=6
	RA_LW_PHYSICS=4
	RA_SW_PHYSICS=4
	SWINT_OPT=0
	SF_SURFACE_PHYSICS=2
	SF_SFCLAY_PHYSICS=1
	SF_URBAN_PHYSICS=1
	BL_PBL_PHYSICS=1 # YSU scheme; use sf_sfclay_physics =1
	BL_MYNN_MIXLENGTH=0
	BL_MYNN_TKEBUDGET=1
	FRACTIONAL_SEAICE=1
	SEAICE_THRESHOLD=0
	NUM_SOIL_LAYERS=4

	SST_UPDATE=1
	DIFF_OPT=2
	MOIST_ADV_OPT=4
	SCALAR_ADV_OPT=4
	TKE_ADV_OPT=4
	CHEM_ADV_OPT=4
	DIFF_6TH_OPT=1
fi
ISFFLX=1
CUDT=0 # CUDT=0: Call CU_PHYSICS each time step

if [[ "${GEOG_DATA_RES:0:10}" == "usgs_lakes" ]]
then
	NUM_LAND_CAT=28 # Depends on GEOG_DATA_RES
else
	NUM_LAND_CAT=21 # Depends on GEOG_DATA_RES
fi
n_we_1=$((E_WE/3))
n_sn_1=$((E_SN/3))
POLE_LAT=$(echo "90.0 - $REF_LAT" | bc -l)   # Discretization time step
POLE_LON=180
STAND_LON=-$REF_LON # A real value specifying the longitude that is parallel with the y-axis in conic and azimuthal projections.
INPUT_FROM_FILE=".true."
if [[ "$RUNGLOBAL" = true ]]
then
	D_POLAR=".true., "
	D_SPECIFIED=".false., "
	DX=$((360 / ($E_WE - 1) ))
	DY=$((180 / ($E_SN - 1) ))
	# STAND_LON, POLE_LAT and POLE_LON assumes N.H.
else
	STAND_LON=$REF_LON # A real value specifying the longitude that is parallel with the y-axis in conic and azimuthal projections.
	D_SPECIFIED=".true., "
	D_POLAR=".false., "
fi
D_NESTED=".false., "
for i in $(seq 2 $MAX_DOM)
do
    D_POLAR=$D_POLAR".false., "
    D_SPECIFIED=$D_SPECIFIED".false., "
    D_NESTED=$D_NESTED".true., "
done
source ~/kode/bashScripts/round
if [[ "$MAP_PROJ" = lat-lon ]]
then
	RADT=$(round "40075*$DX/360")
	TIME_STEP=$(round "6*40075*$DX/360")
	MIN_TIME_STEP=$(round "0.001*40075*$DX/360")
else
	RADT=$(round "$DX/1000")
	TIME_STEP=$(round "6*$DX/1000")
	MIN_TIME_STEP=$(round "0.001*$DX/1000")
fi
START_DATE="${START_YEAR}-${START_MONTH}-${START_DAY}_${START_HOUR}:${START_MINUTE}:${START_SECOND}"
if [[ "$RUNGLOBAL" = true ]]
then
	END_DATE=$START_DATE # only initial conditions are needed for a global run
else
	END_DATE=$(date -u +'%Y-%m-%d_%T' --date="${START_DATE:0:10} ${START_DATE:11} UTC + $RUN_DAYS days + $RUN_HOURS hours + $RUN_MINUTES minutes + $RUN_SECONDS seconds")
fi
END_YEAR=${END_DATE:0:4}
END_MONTH=${END_DATE:5:2}
END_DAY=${END_DATE:8:2}
END_HOUR=${END_DATE:11:2}
END_MINUTE=${END_DATE:14:2}
END_SECOND=${END_DATE:17:2}


if [[ "$assumeNCEPdataExist" == false ]]
then
    TODAY="$(date -u +'%Y-%m-%d')" # Get date in UTC
    NCEPstorageDate=$(date -u +'%s' --date="$TODAY - 10 days")
    if [[ $GFS_RES == "0p25" ]] && [[ $NCEPstorageDate -lt $(date -d ${START_DATE:0:10} +%s) ]]
    then
    	INTERVAL_SECONDS=3600
    else
    	INTERVAL_SECONDS=10800
    fi
else
    INTERVAL_SECONDS=3600
fi

COMP_START_DATE="${START_YEAR}${START_MONTH}${START_DAY}${START_HOUR}"
START_DATE="${START_YEAR}-${START_MONTH}-${START_DAY}_${START_HOUR}:${START_MINUTE}:${START_SECOND}"
END_DATE="${END_YEAR}-${END_MONTH}-${END_DAY}_${END_HOUR}:${END_MINUTE}:${END_SECOND}"
SED_VARIABLES="DIFF_6TH_OPT SST_UPDATE W_DAMPING MIN_TIME_STEP NUM_LAND_CAT ISFFLX FRACTIONAL_SEAICE SEAICE_THRESHOLD NUM_SOIL_LAYERS BL_MYNN_MIXLENGTH SWINT_OPT INTERVAL_SECONDS RUN_DAYS RUN_HOURS RUN_MINUTES RUN_SECONDS TRUELAT1 TRUELAT2 REF_LAT REF_LON STAND_LON pathToResults GEOG_DATA_PATH MAX_DOM START_DATE TIME_STEP MAP_PROJ DX DY POLE_LAT POLE_LON D_POLAR D_SPECIFIED D_NESTED NUM_METGRID_LEVELS NUM_METGRID_SOIL_LEVELS USE_ADAPTIVE_TIME_STEP NCL_OUTPUT_TYPE"
VARIABLES="START_DATE I_PARENT_START J_PARENT_START HISTORY_INTERVAL SF_URBAN_PHYSICS CUDT BL_MYNN_TKEBUDGET RADT PARENT_GRID_RATIO E_WE E_SN E_VERT START_YEAR START_MONTH START_DAY START_HOUR END_DATE END_YEAR END_MONTH END_DAY END_HOUR GEOG_DATA_RES MP_PHYSICS CU_PHYSICS RA_LW_PHYSICS RA_SW_PHYSICS BL_PBL_PHYSICS SF_SFCLAY_PHYSICS SF_SURFACE_PHYSICS FRAMES_PER_OUTFILE INPUT_FROM_FILE CHEM_ADV_OPT TKE_ADV_OPT MOIST_ADV_OPT SCALAR_ADV_OPT DIFF_OPT"
for i in $(seq 1 $MAX_DOM)
do
	D_GRID_ID="${D_GRID_ID}$i, "
	D_PARENT_ID="${D_PARENT_ID}$((i - 1)), "
	for sed_variable in $VARIABLES 
	do
		temp="${sed_variable}_$i"
		if [ "\$$temp"=="" ];
		then
			if [[ -v $sed_variable ]];
			then
				eval "$temp=\$${sed_variable}"
			fi
		fi
		SED_VARIABLES="$SED_VARIABLES $temp"
	done
	if [[ $i == 1 ]]
	then
		PARENT_GRID_RATIO_1=1
		I_PARENT_START_1=1
		J_PARENT_START_1=1
	else
		temp="n_we_$i"
		if [[ ! -v $temp ]];
		then
			im1=$(($i-1))
			eval "$temp=\$((\$n_we_$im1))"
		fi
		temp="n_sn_$i"
		if [[ ! -v $temp ]];
		then
			im1=$(($i-1))
			eval "$temp=\$((\$n_sn_$im1))"
		fi
		eval "E_WE_$i=\$((\$n_we_$i * \$PARENT_GRID_RATIO_$i + 1))"
		eval "E_SN_$i=\$((\$n_sn_$i * \$PARENT_GRID_RATIO_$i + 1))"
		eval "PARENT_GRID_RATIO_$i=3"
		temp="I_PARENT_START_$i"
		if [ "\$$temp"=="" ];
		then
			eval "$temp=\$(((\$E_WE_$i - 1) / 3 + 1))"
		fi
		temp="J_PARENT_START_$i"
		if [ "\$$temp"=="" ];
		then
			eval "$temp=\$(((\$E_SN_$i - 1) / 3 + 1))"
		fi
	fi
	for collector in $VARIABLES
	do
		temp="${collector}_$i"
		eval "temp=\$${temp}"
		re='^[0-9]+$'
		if ! [[ $temp =~ $re ]] && ! [ $temp == .true. ] && ! [ $temp == .false. ];
		then
			if [[ ! -v D_${collector} ]]
			then
				eval "D_${collector}=\"'$temp',\""
			else
				eval "D_${collector}=\"\$D_${collector} '$temp',\""
			fi
		else
			if [[ ! -v D_${collector} ]]
			then
				eval "D_${collector}=\"$temp,\""
			else
				eval "D_${collector}=\"\$D_${collector} $temp,\""
			fi
		fi
	done
done
VARIABLES="$VARIABLES GRID_ID PARENT_ID"
COLLECTORS=$(echo "$VARIABLES" | sed 's/[^ ]*/D_&/g')
SED_VARIABLES="$SED_VARIABLES $COLLECTORS"

for i in $(seq 1 $MAX_DOM)
do
	for sed_variable in $VARIABLES 
	do
		temp="${sed_variable}_$i"
		eval "$temp=\"\""
	done
done
