#!/bin/bash
NP=32
MAX_DOM=1
GEOG_DATA_RES="30s" #10m (~19km), 5m (~9km), 2m (~4km), and 30s (~0.9km).
GFS_RES="0p25" # resolution (in degrees) in longitude and latitude direction (NOTE: if > 0.25 (0p25) then INTERVAL_SECONDS must be > 10800) First 120 hours available hourly, after that every 3 hours
RUN_DAYS=0
RUN_HOURS=3
RUN_MINUTES=0
RUN_SECONDS=0
PARENT_GRID_RATIO=3
MAP_PROJ="lat-lon" # Accepted projections are 'lambert', 'polar', 'mercator', and 'lat-lon.'
#MAP_PROJ="lambert" # Accepted projections are 'lambert', 'polar', 'mercator', and 'lat-lon.'
NCL_OUTPUT_TYPE="png" # 'x11', 'pdf', 'ps', 'ncgm', 'png'
REF_LAT=63.414061 # Latitude of a known reference point inside the domain
REF_LON=10.407602 # Longitude of the same point as used for REF_LAT
TRUELAT1=75
TRUELAT2=45
RUNGLOBAL=false

USE_ADAPTIVE_TIME_STEP=".true."
PARM_CONF=0
if [[ "$PARM_CONF" = 0 ]]
then
	MP_PHYSICS=8
	RA_LW_PHYSICS=1
	RA_SW_PHYSICS=1
	SWINT_OPT=0
	SF_SURFACE_PHYSICS=2
	SF_SFCLAY_PHYSICS=1
	BL_PBL_PHYSICS=1
	BL_MYNN_MIXLENGTH=0
	BL_MYNN_TKEBUDGET=0
	FRACTIONAL_SEAICE=0
	SEAICE_THRESHOLD=0
	NUM_SOIL_LAYERS=4
elif [[ "$PARM_CONF" = 1 ]]
then
	MP_PHYSICS=4
	RA_LW_PHYSICS=4
	RA_SW_PHYSICS=4
	SWINT_OPT=1
	SF_SURFACE_PHYSICS=2
	SF_SFCLAY_PHYSICS=1
	BL_PBL_PHYSICS=7
	BL_MYNN_MIXLENGTH=0
	BL_MYNN_TKEBUDGET=0
	FRACTIONAL_SEAICE=1
	SEAICE_THRESHOLD=0
	NUM_SOIL_LAYERS=2
elif [[ "$PARM_CONF" = 2 ]]
then
	MP_PHYSICS=4
	RA_LW_PHYSICS=4
	RA_SW_PHYSICS=4
	SWINT_OPT=1
	SF_SURFACE_PHYSICS=2
	SF_SFCLAY_PHYSICS=5
	BL_PBL_PHYSICS=5
	BL_MYNN_MIXLENGTH=0
	BL_MYNN_TKEBUDGET=0
	FRACTIONAL_SEAICE=1
	SEAICE_THRESHOLD=0
	NUM_SOIL_LAYERS=4
elif [[ "$PARM_CONF" = 3 ]]
then
	MP_PHYSICS=4
	RA_LW_PHYSICS=4
	RA_SW_PHYSICS=4
	SWINT_OPT=1
	SF_SURFACE_PHYSICS=2
	SF_SFCLAY_PHYSICS=5
	BL_PBL_PHYSICS=5
	BL_MYNN_MIXLENGTH=0
	BL_MYNN_TKEBUDGET=0
	FRACTIONAL_SEAICE=1
	SEAICE_THRESHOLD=0
	NUM_SOIL_LAYERS=4
elif [[ "$PARM_CONF" = 4 ]]
then
	MP_PHYSICS=6
	RA_LW_PHYSICS=1
	RA_SW_PHYSICS=1
	SWINT_OPT=0
	SF_SURFACE_PHYSICS=2
	SF_SFCLAY_PHYSICS=5
	BL_PBL_PHYSICS=5
	BL_MYNN_MIXLENGTH=0
	BL_MYNN_TKEBUDGET=1
	FRACTIONAL_SEAICE=1
	SEAICE_THRESHOLD=0
	NUM_SOIL_LAYERS=4
fi
ISFFLX=1
CU_PHYSICS=1
CUDT=0 # CUDT=0: Call CU_PHYSICS each time step
FRAMES_PER_OUTFILE=1000000
#STAND_LON=0
GEOG_DATA_PATH="$HOME/WPS_DATA/WPS_GEOG"
# Note that al times are UTC
START_HOUR=00 # Must be either 00, 06, 12 or 18 (these are the times the NCEP run the GFS model) Also note that the date is available only some 4 hours after the initialization time
NUM_LAND_CAT=21 # Depends on GEOG_DATA_RES
if [[ "$loopForecast" = true ]]
then
	START_DATE="$(date -u +'%Y-%m-%d')_$START_HOUR:00:00" # Get date in UTC
	START_YEAR=${START_DATE:0:4}
	START_MONTH=${START_DATE:5:2}
	START_DAY=${START_DATE:8:2}
else
	START_YEAR=2020
	START_MONTH=09
	START_DAY=16
fi
if [[ $CASE == "global" ]]
then
	GEOG_DATA_RES="30s" #10m (~19km), 5m (~9km), 2m (~4km), and 30s (~0.9km).
	GFS_RES="0p25" # resolution (in degrees) in longitude and latitude direction. First 120 hours available hourly, after that every 3 hours. Available resolutions: 1p00 (~111km), 0p50 (~55.7km), 0p25 (27.6km)
	# For global runs E_WE should be 2^P*3^Q*5^R+1 for integers P,Q,R in {0,1,2,...}. E.g. (E_WE,E_SN) in {(21 11), (25 13), (31 16), (37 19), (41 21), (61 31), (73 37), (91 46), (121 61), (181 91), (361 181), (721 361), (1081 541), (1441 721), ...}
	E_WE=721 # number of velocity points in east west direction
	E_SN=361 # number of velocity points in south north direction
	E_WE=361 # number of velocity points in east west direction
	E_SN=181 # number of velocity points in south north direction
	E_WE=181 # number of velocity points in east west direction
	E_SN=91 # number of velocity points in south north direction
	E_VERT=50 # number of points in the vertical directions. This number must be the same for each domain.
	TIME_STEP=300 # in seconds (should be 6*dx (in km))
	#TIME_STEP=600 # in seconds (should be 6*dx (in km))
	#TIME_STEP=3600 # in seconds (should be 6*dx (in km))
	RUN_DAYS=30
	RUN_HOURS=0
	D_I_PARENT_START="1, 84, 34, 34, 34, 34, 34,"
	D_J_PARENT_START="1, 34, 34, 34, 34, 34, 34," # 29
	D_HISTORY_INTERVAL="180,180,180,180,180,180,180," # in minutes
	D_HISTORY_INTERVAL="60,60,60,60,60,60,60," # in minutes
	USE_ADAPTIVE_TIME_STEP=".true."
	#REF_LAT=0 # Latitude of a known reference point inside the domain
	#REF_LON=0 # Longitude of the same point as used for REF_LAT
	RUNGLOBAL=true
elif [[ $CASE == "ATBcase1" ]] || [[ $CASE == "ATBcase2" ]] 
then
	MAX_DOM=4
	MAP_PROJ="lat-lon" # Accepted projections are 'lambert', 'polar', 'mercator', and 'lat-lon.'
	DX=0.25
	DY=0.25
	GEOG_DATA_RES="30s" #10m (~19km), 5m (~9km), 2m (~4km), and 30s (~0.9km).
	GFS_RES="0p25" # resolution (in degrees) in longitude and latitude direction (NOTE: if > 0.25 (0p25) then INTERVAL_SECONDS must be > 10800) First 120 hours available hourly, after that every 3 hours
	E_WE=101 # number of velocity points in east west direction
	E_SN=101 # number of velocity points in south north direction
	E_VERT=50 #  This number must be the same for each domain.
	TIME_STEP=6 # in seconds (should be 6*dx (in km))
	RUN_DAYS=0

	D_I_PARENT_START="1, 34, 34, 34, 34, 34, 34,"
	D_J_PARENT_START="1, 34, 34, 34, 34, 34, 34," # 29
	D_HISTORY_INTERVAL="10,10,10,10,10,10,10," # in minutes
	# Use Blindern location:
	REF_LAT=59.9423 # Latitude of a known reference point inside the domain
	REF_LON=10.72 # Longitude of the same point as used for REF_LAT
	START_YEAR=2020
	if [[ $CASE == "ATBcase1" ]] 
	then # case 1
		START_MONTH=02
		START_DAY=09
		START_HOUR=06
		RUN_HOURS=6
	else
		START_MONTH=04
		START_DAY=13
		START_HOUR=12
		RUN_HOURS=6
	fi
elif [[ $CASE == "SN76914" ]] || [[ $CASE == "SN18700" ]] || [[ $CASE == "Elverum" ]] || [[ $CASE == "Bessaker" ]]
then
	MAX_DOM=4
	MAP_PROJ="lat-lon" # Accepted projections are 'lambert', 'polar', 'mercator', and 'lat-lon.'
	DX=0.25
	DY=0.25
	GEOG_DATA_RES="30s" #10m (~19km), 5m (~9km), 2m (~4km), and 30s (~0.9km).
	GFS_RES="0p25" # resolution (in degrees) in longitude and latitude direction (NOTE: if > 0.25 (0p25) then INTERVAL_SECONDS must be > 10800) First 120 hours available hourly, after that every 3 hours
	E_WE=101 # number of velocity points in east west direction
	E_SN=101 # number of velocity points in south north direction
	E_VERT=50 #  This number must be the same for each domain.
	TIME_STEP=6 # in seconds (should be 6*dx (in km))
	RUN_DAYS=0
	RUN_HOURS=24
	START_HOUR=12 # Must be either 00, 06, 12 or 18 (these are the times the NCEP run the GFS model) Also note that the date is available only some 4 hours after the initialization time

	D_I_PARENT_START="1, 34, 34, 34, 34, 34, 34,"
	D_J_PARENT_START="1, 34, 34, 34, 34, 34, 34," # 29
	D_HISTORY_INTERVAL="10,10,10,10,10,10,10," # in minutes
	if [[ $CASE == "SN76914" ]]
	then
		REF_LAT=59.9492 # Latitude of a known reference point inside the domain
		REF_LON=10.715 # Longitude of the same point as used for REF_LAT
	elif [[ $CASE == "Bessaker" ]]
	then
		REF_LAT=64.2233001 # Latitude of a known reference point inside the domain (Bessakerfjellet)
		REF_LON=10.3727204 # Longitude of the same point as used for REF_LAT
	elif [[ $CASE == "Elverum" ]]
	then
		REF_LAT=60.8771324 # Latitude of a known reference point inside the domain
		REF_LON=11.5700942 # Longitude of the same point as used for REF_LAT
	else
		REF_LAT=59.9423 # Latitude of a known reference point inside the domain
		REF_LON=10.72 # Longitude of the same point as used for REF_LAT
	fi
elif [[ $CASE == "nested" ]]
then
	MAX_DOM=7
	GEOG_DATA_RES="30s" #10m (~19km), 5m (~9km), 2m (~4km), and 30s (~0.9km).
	GFS_RES="0p25" # resolution (in degrees) in longitude and latitude direction (NOTE: if > 0.25 (0p25) then INTERVAL_SECONDS must be > 10800) First 120 hours available hourly, after that every 3 hours
	E_WE=201 # number of velocity points in east west direction
	E_SN=101 # number of velocity points in south north direction
	E_VERT=50 #  This number must be the same for each domain.
	TIME_STEP=1 # in seconds (should be 6*dx (in km))
	RUN_DAYS=0
	RUN_HOURS=3
	D_I_PARENT_START="1, 84, 34, 34, 34, 34, 34,"
	D_J_PARENT_START="1, 34, 34, 34, 34, 34, 34," # 29
	D_HISTORY_INTERVAL="1,1,1,1,1,1,1,1," # in minutes
	REF_LAT=63.414061 # Latitude of a known reference point inside the domain
	REF_LON=10.407602 # Longitude of the same point as used for REF_LAT
elif [[ $CASE == "YR" ]]
then
	E_WE=401 # number of velocity points in east west direction
	E_SN=401 # number of velocity points in south north direction
	E_VERT=51 #  This number must be the same for each domain.
	TIME_STEP=15 # in seconds (should be 6*dx (in km))
	D_I_PARENT_START="1, 34, 34, 34, 34, 34, 34,"
	D_J_PARENT_START="1, 34, 34, 34, 34, 34, 34," # 29
	D_HISTORY_INTERVAL="60,60,60,60,60,60,60," # in minutes
	MAP_PROJ="lambert"
	DX=2500
	DY=2500
	REF_LAT=66 # Latitude of a known reference point inside the domain
	REF_LON=12 # Longitude of the same point as used for REF_LAT
	RUN_HOURS=66
elif [[ $CASE == "debug" ]]
then
	MAX_DOM=2
	NP=2
	DX=0.25
	DY=0.25
	E_WE=40 # number of velocity points in east west direction
	E_SN=40 # number of velocity points in south north direction
	E_VERT=40 #  This number must be the same for each domain.
	TIME_STEP=3600 # in seconds (should be 6*dx (in km))
	D_I_PARENT_START="1, 10, 34, 34, 34, 34, 34,"
	D_J_PARENT_START="1, 10, 34, 34, 34, 34, 34," # 29
	D_HISTORY_INTERVAL="1,1,1,1,1,1,1," # in minutes
fi






n_we_1=$((E_SN/3))
n_sn_1=$((E_SN/3))
START_DATE="$START_YEAR-$START_MONTH-${START_DAY}_$START_HOUR:00:00"
POLE_LAT=$(echo "90.0 - $REF_LAT" | bc -l)   # Discretization time step
POLE_LON=180
STAND_LON=-$REF_LON # A real value specifying the longitude that is parallel with the y-axis in conic and azimuthal projections.
if [[ "$RUNGLOBAL" = true ]]
then
	D_POLAR=".true.,.false.,"
	D_SPECIFIED=".false.,.false.,"
	DX=$((360 / ($E_WE - 1) ))
	DY=$((180 / ($E_SN - 1) ))
	# STAND_LON, POLE_LAT and POLE_LON assumes N.H.
else
	STAND_LON=$REF_LON # A real value specifying the longitude that is parallel with the y-axis in conic and azimuthal projections.
	D_SPECIFIED=".true.,.false.,"
	D_POLAR=".false.,"
fi
source ~/kode/bashScripts/round
if [[ "$MAP_PROJ" = lat-lon ]]
then
	RADT=$(round "40075*$DX/360")
	TIME_STEP=$(round "6*40075*$DX/360")
else
	RADT=$(round "$DX/1000")
	TIME_STEP=$(round "6*$DX/1000")
fi
if [[ "$RUNGLOBAL" = true ]]
then
	END_DATE=$START_DATE # only initial conditions are needed for a global run
else
	END_DATE=$(date -u +'%Y-%m-%d_%T' --date="${START_DATE:0:10} ${START_DATE:11} UTC + $RUN_DAYS days + $RUN_HOURS hours + $RUN_MINUTES minutes + $RUN_SECONDS seconds")
fi
END_YEAR=${END_DATE:0:4}
END_MONTH=${END_DATE:5:2}
END_DAY=${END_DATE:8:2}
END_HOUR=${END_DATE:11:2}
NCEPstorageDate=$(date -u +'%s' --date="$TODAY - 11 days")
if [[ $GFS_RES == "0p25" ]] && [[ $NCEPstorageDate -lt $(date -d ${START_DATE:0:10} +%s) ]]
then
	INTERVAL_SECONDS=3600
else
	INTERVAL_SECONDS=10800
fi

COMP_START_DATE="${START_YEAR}${START_MONTH}${START_DAY}${START_HOUR}"
START_DATE="$START_YEAR-$START_MONTH-${START_DAY}_$START_HOUR:00:00"
END_DATE="${END_YEAR}-${END_MONTH}-${END_DAY}_${END_HOUR}:00:00"
SED_VARIABLES="NUM_LAND_CAT ISFFLX FRACTIONAL_SEAICE SEAICE_THRESHOLD NUM_SOIL_LAYERS BL_MYNN_MIXLENGTH SWINT_OPT D_I_PARENT_START D_J_PARENT_START INTERVAL_SECONDS RUN_DAYS RUN_HOURS RUN_MINUTES RUN_SECONDS TRUELAT1 TRUELAT2 REF_LAT REF_LON STAND_LON GEOG_DATA_PATH MAX_DOM START_DATE TIME_STEP NCL_OUTPUT_TYPE MAP_PROJ DX DY POLE_LAT POLE_LON D_POLAR D_SPECIFIED D_HISTORY_INTERVAL NUM_METGRID_LEVELS NUM_METGRID_SOIL_LEVELS USE_ADAPTIVE_TIME_STEP"
VARIABLES="CUDT BL_MYNN_TKEBUDGET RADT PARENT_ID PARENT_GRID_RATIO E_WE E_SN E_VERT START_YEAR START_MONTH START_DAY START_HOUR END_YEAR END_MONTH END_DAY END_HOUR START_DATE END_DATE GEOG_DATA_RES MP_PHYSICS CU_PHYSICS RA_LW_PHYSICS RA_SW_PHYSICS BL_PBL_PHYSICS SF_SFCLAY_PHYSICS SF_SURFACE_PHYSICS FRAMES_PER_OUTFILE"
for i in $(seq 1 $MAX_DOM)
do
	for sed_variable in $VARIABLES 
	do
		temp="${sed_variable}_$i"
		if [[ ! -v $temp && -v $sed_variable ]];
		then
			eval "$temp=\$${sed_variable}"
		fi
		SED_VARIABLES="$SED_VARIABLES $temp"
	done
	if [[ $i == 1 ]]
	then
		PARENT_GRID_RATIO_1=1
		PARENT_ID_1=1
		PARENT_ID_2=1
		I_PARENT_START_1=1
		J_PARENT_START_1=1
	else
		temp="n_we_$i"
		if [[ ! -v $temp ]];
		then
			im1=$(($i-1))
			eval "$temp=\$((\$n_we_$im1))"
		fi
		temp="n_sn_$i"
		if [[ ! -v $temp ]];
		then
			im1=$(($i-1))
			eval "$temp=\$((\$n_sn_$im1))"
		fi
		eval "E_WE_$i=\$((\$n_we_$i * \$PARENT_GRID_RATIO_$i + 1))"
		eval "E_SN_$i=\$((\$n_sn_$i * \$PARENT_GRID_RATIO_$i + 1))"
		eval "PARENT_GRID_RATIO_$i=3"
		temp="I_PARENT_START_$i"
		if [[ ! -v $temp ]];
		then
			eval "$temp=\$((\$E_WE_$i / 3 + 1))"
		fi
		temp="J_PARENT_START_$i"
		if [[ ! -v $temp ]];
		then
			eval "$temp=\$((\$E_SN_$i / 3 + 1))"
		fi
	fi
	if [[ $i > 2 ]]
	then
		eval "PARENT_ID_$i=$(($i - 1))"
	fi
	for collector in $VARIABLES
	do
		temp="${collector}_$i"
		eval "temp=\$${temp}"
		re='^[0-9]+$'
		if ! [[ $temp =~ $re ]];
		then
			if [[ ! -v D_${collector} ]]
			then
				eval "D_${collector}=\"'$temp',\""
			else
				eval "D_${collector}=\"\$D_${collector} '$temp',\""
			fi
		else
			if [[ ! -v D_${collector} ]]
			then
				eval "D_${collector}=\"$temp,\""
			else
				eval "D_${collector}=\"\$D_${collector} $temp,\""
			fi
		fi
	done
done
COLLECTORS=$(echo "$VARIABLES" | sed 's/[^ ]*/D_&/g')
SED_VARIABLES="$SED_VARIABLES $COLLECTORS"

